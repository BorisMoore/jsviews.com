{"version":3,"sources":["contents-jsoapi.js"],"names":["content","$","views","documentation","jsoapi","useStorage","parseJSON","localStorage","getItem","title","path","sections","_type","text","links","topics","hash","label","propchange","setprop","typeLabel","name","object","method","returns","signatures","params","type","optional","description","args","example","sectionTypes","para","data","template","code","sample","anchor","codetabs","markup","html","height","arrchange","insert","header","action","remove","refresh","move","observeobjectsarrays","onpropchange","onarrchange","observe","unobserve","$observable","observeAll","unobserveAll","computed","url","namespaces","jsoadvanced","removeprop"],"mappings":"AAAA,GAAIA,SAAUC,EAAEC,MAAMC,cAAcH,OAEpCA,SAAQI,OAASJ,QAAQK,YAAcJ,EAAEK,UAAUC,aAAaC,QAAQ,8BAEtEJ,QACEK,MAAS,uCACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,wNAGRD,MAAS,QACTH,MAAS,kBACTK,SACAC,SAEIC,KAAQ,cACRC,MAAS,kCAGTD,KAAQ,aACRC,MAAS,gCAGTD,KAAQ,YACRC,MAAS,iCAKbL,MAAS,QACTH,MAAS,iCACTK,SACAC,SAEIC,KAAQ,uBACRC,MAAS,8BAKbL,MAAS,QACTH,MAAS,GACTK,SACAC,SAEIC,KAAQ,WACRC,MAAS,4BAMnBC,YACET,MAAS,8BACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,4LAGRD,MAAS,QACTH,MAAS,GACTK,SACAC,SAEIC,KAAQ,UACRC,MAAS,uCAGTD,KAAQ,aACRC,MAAS,yCAKbL,MAAS,OACTH,MAAS,GACTI,KAAQ,iEAIdM,SACEV,MAAS,gEACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,iDACTI,KAAQ,icAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,kDACTY,KAAQ,cACRC,OAAU,uBACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,OACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,6EAGfjB,MAAS,QACTS,KAAQ,QACRM,KAAQ,MACRC,UAAY,EACZC,YAAe,mBAGnBC,QACAnB,YACAoB,QAAW,mDACXF,YAAe,2CAGnBA,YAAe,kDACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,gEACTI,KAAQ,iIACRyB,OAAU,gBAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,WACTH,MAAS,GACT+B,OAAU,mCAGV5B,MAAS,OACTH,MAAS,mDACT2B,KAAQ,qEAGZA,KAAQ,6XACRK,KAAQ,+HACRC,OAAU,KACVjC,MAAS,KAGTG,MAAS,OACTH,MAAS,oEACTI,KAAQ,6IACRyB,OAAU,4BAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,4DAGRxB,MAAS,OACTH,MAAS,mDACT2B,KAAQ,qEAGZA,KAAQ,wgBACRK,KAAQ,iIACRhC,MAAS,GACTiC,OAAU,QAGV9B,MAAS,OACTH,MAAS,0DACTI,KAAQ,oGACRyB,OAAU,mBAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,wDAGRxB,MAAS,OACTH,MAAS,mDACT2B,KAAQ,mEAGZA,KAAQ,omBACRK,KAAQ,iIACRC,OAAU,MACVjC,MAAS,KAGTG,MAAS,OACTH,MAAS,GACTI,KAAQ,UAGRD,MAAS,OACTH,MAAS,iDACTI,KAAQ,uGACRyB,OAAU,iBAGV1B,MAAS,MACTQ,UAAa,OACbX,MAAS,oEACTY,KAAQ,cACRC,OAAU,uBACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,YACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,oGAGnBC,QACAnB,YACAoB,QAAW,+CACXF,YAAe,wDAGnBA,YAAe,GACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,WAIXF,MAAS,OACTH,MAAS,oDACTI,KAAQ,iQAGRD,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,6CACT2B,KAAQ,4GAGRxB,MAAS,OACTH,MAAS,0DACT2B,KAAQ,iEAGZA,KAAQ,wuBACRK,KAAQ,8HACRhC,MAAS,GACTiC,OAAU,QAGV9B,MAAS,QACTH,MAAS,YACTK,SACAC,SAEIH,MAAS,QACTI,KAAQ,aACRC,MAAS,6CAMnB0B,WACElC,MAAS,6BACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,sJAGRD,MAAS,QACTH,MAAS,GACTK,SACAC,SAEIC,KAAQ,SACRC,MAAS,iCAGTD,KAAQ,SACRC,MAAS,iCAGTD,KAAQ,OACRC,MAAS,+BAGTD,KAAQ,UACRC,MAAS,oCAKbL,MAAS,OACTH,MAAS,GACTI,KAAQ,mEAId+B,QACEnC,MAAS,0DACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,gDACTI,KAAQ,2QAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,qDACTY,KAAQ,SACRC,OAAU,sBACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,QACRM,KAAQ,UACRC,UAAY,EACZC,YAAe,wFAGfjB,MAAS,QACTS,KAAQ,gBACRM,KAAQ,MACRC,UAAY,EACZC,YAAe,4CAGnBC,QACAnB,YACAoB,QAAW,iDACXF,YAAe,yDAGnBA,YAAe,iDACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,iCACTI,KAAQ,wKACRyB,OAAU,WAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,WACTH,MAAS,GACT+B,OAAU,iFAGV5B,MAAS,OACTH,MAAS,kBACT2B,KAAQ,+DAGZA,KAAQ,6ZACRK,KAAQ,uGACRC,OAAU,MACVjC,MAAS,KAGTG,MAAS,OACTH,MAAS,mCACTI,KAAQ,uJACRyB,OAAU,oBAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,kDAGRxB,MAAS,OACTH,MAAS,oBACT2B,KAAQ,wGAGZA,KAAQ,+oBACRK,KAAQ,qPACRC,OAAU,MACVjC,MAAS,GACToC,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,4CACTI,KAAQ,uNACRyB,OAAU,cAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,sCAGRxB,MAAS,OACTH,MAAS,2CACT2B,KAAQ,wDAGZA,KAAQ,kpBACRK,KAAQ,2PACRC,OAAU,MACVjC,MAAS,GACToC,OAAU,0DACVC,OAAU,YAIhBC,QACEtC,MAAS,0DACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,+CACTI,KAAQ,0QAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,mDACTY,KAAQ,SACRC,OAAU,sBACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,QACRM,KAAQ,UACRC,UAAY,EACZC,YAAe,+GAGfjB,MAAS,QACTS,KAAQ,cACRM,KAAQ,UACRC,UAAY,EACZC,YAAe,0EAGnBC,QACAnB,YACAoB,QAAW,qCACXF,YAAe,sDAGnBA,YAAe,yCACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,8CACTI,KAAQ,8KACRyB,OAAU,gBAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,WACTH,MAAS,GACT+B,OAAU,iFAGV5B,MAAS,OACTH,MAAS,wBACT2B,KAAQ,mCAGZA,KAAQ,0OACRK,KAAQ,yGACRC,OAAU,MACVjC,MAAS,KAGTG,MAAS,OACTH,MAAS,iDACTI,KAAQ,0MACRyB,OAAU,cAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,kDAGRxB,MAAS,OACTH,MAAS,qCACT2B,KAAQ,4EAGZA,KAAQ,ijBACRK,KAAQ,iPACRC,OAAU,MACVjC,MAAS,8DACToC,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,uDACTI,KAAQ,qLACRyB,OAAU,oBAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,sCAGRxB,MAAS,OACTH,MAAS,+BACT2B,KAAQ,yCAGZA,KAAQ,yjBACRK,KAAQ,uPACRC,OAAU,MACVjC,MAAS,GACToC,OAAU,0DACVC,OAAU,YAIhBE,SACEvC,MAAS,2DACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,wDACTI,KAAQ,2QAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,0CACTY,KAAQ,UACRC,OAAU,sBACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,QACRM,KAAQ,QACRC,UAAY,EACZC,YAAe,0CAGnBC,QACAnB,YACAoB,QAAW,0CACXF,YAAe,gDAGnBA,YAAe,0DACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,yDACTI,KAAQ,wSACRyB,OAAU,YAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,mDAGRxB,MAAS,OACTH,MAAS,oDACT2B,KAAQ,+FAGRxB,MAAS,OACTH,MAAS,0CACT2B,KAAQ,sFAGZA,KAAQ,ipCACRK,KAAQ,gQACRC,OAAU,MACVjC,MAAS,GACToC,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,GACTI,KAAQ,mqBAIdoC,MACExC,MAAS,wDACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,6CACTI,KAAQ,wQAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,4DACTY,KAAQ,OACRC,OAAU,sBACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,WACRM,KAAQ,UACRC,UAAY,EACZC,YAAe,wFAGfjB,MAAS,QACTS,KAAQ,WACRM,KAAQ,UACRC,UAAY,EACZC,YAAe,4CAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,UACRC,UAAY,EACZC,YAAe,KAGnBC,QACAnB,YACAoB,QAAW,sCACXF,YAAe,gEAGnBA,YAAe,qCACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,mCACTI,KAAQ,kSACRyB,OAAU,SAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACT2B,KAAQ,mDAGRxB,MAAS,OACTH,MAAS,2CACT2B,KAAQ,qCAGRxB,MAAS,OACTH,MAAS,4CACT2B,KAAQ,wCAGZA,KAAQ,8nBACRK,KAAQ,mRACRC,OAAU,MACVjC,MAAS,GACToC,OAAU,0DACVC,OAAU,YAIhBI,sBACEzC,MAAS,0BACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,sHAGRD,MAAS,QACTH,MAAS,GACTK,SACAC,SAEIC,KAAQ,eACRC,MAAS,qBAGTD,KAAQ,cACRC,MAAS,kBAGTD,KAAQ,UACRC,MAAS,gBAGTD,KAAQ,YACRC,MAAS,kBAGTD,KAAQ,aACRC,MAAS,gCAGTD,KAAQ,eACRC,MAAS,kCAGTD,KAAQ,aACRC,MAAS,6BAMnBkC,cACE1C,MAAS,kCACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,qZAGRD,MAAS,OACTH,MAAS,qBACTI,KAAQ,sJACRyB,OAAU,cAGV1B,MAAS,OACTH,MAAS,sFACTI,KAAQ,8iBAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,4CACTY,KAAQ,YACRC,OAAU,GACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,KACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,2EAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,2FAGnBC,QACAnB,YACAoB,QAAW,8CACXF,YAAe,0DAGnBA,YAAe,6CACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,gDACTI,KAAQ;AACRyB,OAAU,SAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,8EACTI,KAAQ,2TAGZuB,KAAQ,++BACRK,KAAQ,iTACRC,OAAU,MACVjC,MAAS,kCACT6B,OAAU,oBACVO,OAAU,0DACVC,OAAU,YAIhBM,aACE3C,MAAS,+BACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,2VAGRD,MAAS,OACTH,MAAS,qBACTI,KAAQ,sOACRyB,OAAU,cAGV1B,MAAS,OACTH,MAAS,2CACTI,KAAQ,gSAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,4CACTY,KAAQ,YACRC,OAAU,GACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,KACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,0EAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,uFAGnBC,QACAnB,YACAoB,QAAW,8CACXF,YAAe,uDAGnBA,YAAe,0CACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,6CACTI,KAAQ,owDACRyB,OAAU,SAGV1B,MAAS,OACTH,MAAS,uDACTI,KAAQ,yTAIdwC,SACE5C,MAAS,8BACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,2jBAGRD,MAAS,OACTH,MAAS,oBACTI,KAAQ,wMACRyB,OAAU,YAGV1B,MAAS,OACTH,MAAS,YACTI,KAAQ,izDACRyB,OAAU,UAGV1B,MAAS,OACTH,MAAS,8CACTI,KAAQ,osDACRyB,OAAU,SAGV1B,MAAS,OACTH,MAAS,+CACTI,KAAQ,8+CACRyB,OAAU,QAGV1B,MAAS,OACTH,MAAS,wEACTI,KAAQ,uVAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,2CACTY,KAAQ,UACRC,OAAU,IACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,gBACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,mCAGfjB,MAAS,QACTS,KAAQ,OACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,6DAGfjB,MAAS,QACTS,KAAQ,MACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,qBAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,0FAGnBC,QACAnB,YACAoB,QAAW,mDACXF,YAAe,sDAGfjB,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,SACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,4BAGfjB,MAAS,QACTS,KAAQ,MACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,iDAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,0FAGnBC,QACAnB,YACAoB,QAAW,sCACXF,YAAe,mDAGfjB,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,QACRM,KAAQ,QACRC,UAAY,EACZC,YAAe,2BAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,0FAGnBC,QACAnB,YACAoB,QAAW,iCACXF,YAAe,2CAGnBA,YAAe,iFACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,MACTQ,UAAa,OACbX,MAAS,4CACTY,KAAQ,YACRC,OAAU,GACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,KACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,0QAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,q6CAGnBC,QACAnB,YACAoB,QAAW,mDACXF,YAAe,2DAGnBA,YAAe,yJACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,gBAGV1B,MAAS,OACTH,MAAS,WACTI,KAAQ,oFACRyB,OAAU,YAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,mCACTI,KAAQ,iMAGRD,MAAS,OACTH,MAAS,sBACT2B,KAAQ,yHAGRxB,MAAS,WACTH,MAAS,sCACT+B,OAAU,yCAGV5B,MAAS,OACTH,MAAS,qDACT2B,KAAQ,2KAGZA,KAAQ,68BACRK,KAAQ,0mBACRC,OAAU,MACVjC,MAAS,2CACT6B,OAAU,kBACVO,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,GACTI,KAAQ,6IAGRD,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,mCACTI,KAAQ,kUAGRD,MAAS,OACTH,MAAS,sBACTI,KAAQ,2OAGZuB,KAAQ,uwCACRK,KAAQ,44BACRC,OAAU,MACVjC,MAAS,2EACT6B,OAAU,qBACVO,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,GACTI,KAAQ,iPAGRD,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,8XAGZ4B,KAAQ,04BACRL,KAAQ,+1CACRE,OAAU,aACVI,OAAU,MACVjC,MAAS,iEACToC,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,GACTI,KAAQ,2MAGRD,MAAS,OACTH,MAAS,wCACTI,KAAQ,kXACRyB,OAAU,aAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,qSAGZ4B,KAAQ,olBACRL,KAAQ,y1CACRM,OAAU,MACVjC,MAAS,kCACT6B,OAAU,mBACVO,OAAU,0DACVC,OAAU,WAGVlC,MAAS,QACTH,MAAS,YACTK,SACAC,SAEIH,MAAS,QACTI,KAAQ,aACRC,MAAS,iBAGTL,MAAS,QACTI,KAAQ,YACRC,MAAS,gBAGTL,MAAS,QACTI,KAAQ,aACRC,MAAS,kBAMnBqC,WACE7C,MAAS,6CACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,oVAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,6CACTY,KAAQ,YACRC,OAAU,IACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,gBACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,qCAGfjB,MAAS,QACTS,KAAQ,OACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,+DAGfjB,MAAS,QACTS,KAAQ,MACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,qBAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,sCAGnBC,QACAnB,YACAoB,QAAW,qDACXF,YAAe,6DAGfjB,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,gBACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,mCAGnBC,QACAnB,YACAoB,QAAW,wBACXF,YAAe,0EAGfjB,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,gBACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,qCAGfjB,MAAS,QACTS,KAAQ,OACRM,KAAQ,SACRC,UAAY,EACZC,YAAe;GAGfjB,MAAS,QACTS,KAAQ,MACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,qBAGnBC,QACAnB,YACAoB,QAAW,yCACXF,YAAe,+DAGfjB,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,sCAGnBC,QACAnB,YACAoB,QAAW,0BACXF,YAAe,gEAGnBA,YAAe,mFACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,WACTI,KAAQ,yMAGRD,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,sJAGRD,MAAS,OACTH,MAAS,2EACT2B,KAAQ,iMAGZA,KAAQ,srCACRK,KAAQ,utBACRC,OAAU,MACVjC,MAAS,yCACT6B,OAAU,SACVO,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,yBACTI,KAAQ,grIACRyB,OAAU,aAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,wEACT2B,KAAQ,+NAGZK,KAAQ,s7BACRL,KAAQ,+/CACRM,OAAU,MACVjC,MAAS,uDACT6B,OAAU,kBACVO,OAAU,0DACVC,OAAU,WAGVlC,MAAS,QACTH,MAAS,YACTK,SACAC,SAEIH,MAAS,QACTI,KAAQ,eACRC,MAAS,mBAGTL,MAAS,QACTI,KAAQ,UACRC,MAAS,cAGTL,MAAS,QACTI,KAAQ,aACRC,MAAS,kBAMnBsC,aACE9C,MAAS,oDACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,2/BAGRD,MAAS,OACTH,MAAS,mDACTI,KAAQ,i7BAId2C,YACE/C,MAAS,4EACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,geAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,oDACTY,KAAQ,aACRC,OAAU,8BACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,0FAGnBC,QACAnB,YACAoB,QAAW,8CACXF,YAAe,iDAGfjB,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,0FAGfjB,MAAS,QACTS,KAAQ,WACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,0EAGnBC,QACAnB,YACAoB,QAAW,wDACXF,YAAe,2EAGnBA,YAAe,kIACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,GACTI,KAAQ,yMAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,4CACTY,KAAQ,YACRC,OAAU,GACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,KACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,scAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,q6CAGnBC,QACAnB,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,+UAGZkB,QAAW,yFACXF,YAAe,2DAGnBA,YAAe,0HACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,gBAGV1B,MAAS,OACTH,MAAS,UACTI,KAAQ,iWACRyB,OAAU,WAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,2DACTI,KAAQ,yNAGRD,MAAS,OACTH,MAAS,sBACT2B,KAAQ,yRAGZA,KAAQ,82CACRK,KAAQ,65BACRC,OAAU,MACVjC,MAAS,6EACToC,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,0CACTI,KAAQ,qeACRyB,OAAU,WAGV1B,MAAS,MACTQ,UAAa,OACbX,MAAS,sDACTY,KAAQ,WACRC,OAAU,GACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,OACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,+CAGfjB,MAAS,QACTS,KAAQ,SACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,0CAGfjB,MAAS,QACTS,KAAQ,YACRM,KAAQ,QACRC,UAAY,EACZC,YAAe,uFAGnBC,QACAnB,YACAoB,QAAW,+GACXF,YAAe,iEACfL,QAAW,SAGfK,YAAe,mIACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,eAGV1B,MAAS,OACTH,MAAS,kDACTI,KAAQ,gWACRyB,OAAU,OAGV1B,MAAS,OACTH,MAAS,8BACTI,KAAQ,2PACRyB,OAAU,iBAGV1B,MAAS,QACTH,MAAS,YACTK,SACAC,SAEIH,MAAS,QACTI,KAAQ,eACRC,MAAS,mBAGTL,MAAS,QACTI,KAAQ,UACRC,MAAS,cAGTL,MAAS,QACTI,KAAQ,aACRC,MAAS,kBAMnBwC,cACEhD,MAAS,gCACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,+XAGRD,MAAS,MACTQ,UAAa,OACbX,MAAS,sDACTY,KAAQ,eACRC,OAAU,0BACVC,QAAU,EACVC,QAAW,GACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,YACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,sCAGfjB,MAAS,QACTS,KAAQ,WACRM,KAAQ,WACRC,UAAY,EACZC,YAAe,oBAGnBC,QACAnB,YACAoB,QAAW,iDACXF,YAAe,iEAGfjB,MAAS,YACTH,MAAS,GACTiB,UACAI,QACAnB,YACAoB,QAAW,wCACXF,YAAe,yGAGnBA,YAAe,mHACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,WACTI,KAAQ,sNAGRD,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,sJAGRD,MAAS,OACTH,MAAS,0DACT2B,KAAQ,mLAGZK,KAAQ,s7BACRL,KAAQ,8kDACRM,OAAU,MACVjC,MAAS,iBACT6B,OAAU,SACVO,OAAU,0DACVC,OAAU,WAGVlC,MAAS,OACTH,MAAS,2BACTI,KAAQ,6jBACRyB,OAAU,iBAGV1B,MAAS,OACTH,MAAS,oDACTI,KAAQ,oWACRyB,OAAU,OAGV1B,MAAS,QACTH,MAAS,YACTK,SACAC,SAEIH,MAAS,QACTI,KAAQ,aACRC,MAAS,iBAGTL,MAAS,QACTI,KAAQ,YACRC,MAAS,gBAGTL,MAAS,QACTI,KAAQ,aACRC,MAAS,kBAMnByC,UACEjD,MAAS,+CACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ;GAGRD,MAAS,OACTH,MAAS,iCACTI,KAAQ,66BACRyB,OAAU,WAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,ikBAGZuB,KAAQ,4hBACRK,KAAQ,4TACRC,OAAU,KACVjC,MAAS,YAGTG,MAAS,OACTH,MAAS,GACTI,KAAQ,sUAGRD,MAAS,OACTH,MAAS,qCACTI,KAAQ,8fACRyB,OAAU,OAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,mhBAGZ6B,OAAU,KACVD,KAAQ,4TACRL,KAAQ,+nBACR3B,MAAS,+BAGTG,MAAS,OACTH,MAAS,2CACTI,KAAQ,w/BACRyB,OAAU,eAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,yXAGZuB,KAAQ,mkBACRK,KAAQ,ybACRC,OAAU,KACVjC,MAAS,wBAGTG,MAAS,OACTH,MAAS,iDACTI,KAAQ,obACRyB,OAAU,kBAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,qfAGZuB,KAAQ,spBACRK,KAAQ,seACRC,OAAU,MACVjC,MAAS,4BAGTG,MAAS,OACTH,MAAS,sCACTI,KAAQ,6gCACRyB,OAAU,WAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,uTAGZ4B,KAAQ,mpBACRL,KAAQ,swBACRM,OAAU,MACVjC,MAAS,6CAGTG,MAAS,OACTH,MAAS,GACTI,KAAQ,miBAGRD,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,ubAGZ4B,KAAQ,ymBACRL,KAAQ,k9BACR3B,MAAS,kEACTiC,OAAU,QAGV9B,MAAS,OACTH,MAAS,mDACTI,KAAQ,6pEACRyB,OAAU,YAGV1B,MAAS,OACTH,MAAS,0DACTI,KAAQ,kYACRyB,OAAU,gBAGV1B,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,ggBAGRD,MAAS,OACTH,MAAS,gCACTI,KAAQ,8RAGZ4B,KAAQ,GACRL,KAAQ,GACRuB,IAAO,2CACPjB,OAAU,MACVjC,MAAS,kBAGTG,MAAS,OACTH,MAAS,GACTI,KAAQ,sKAGRD,MAAS,OACTH,MAAS,iCACTI,KAAQ,2zBACRyB,OAAU,iBAIhBsB,YACEnD,MAAS,sCACTC,KAAQ,GACRC,WAEIC,MAAS,OACTH,MAAS,GACTI,KAAQ,w1BAGRD,MAAS,OACTH,MAAS,uDACTI,KAAQ,q8CACRyB,OAAU,YAGV1B,MAAS,OACTH,MAAS,yDACTI,KAAQ,whCACRyB,OAAU,eAGV1B,MAAS,OACTH,MAAS,qDACTI,KAAQ,iqCACRyB,OAAU,YAGV1B,MAAS,OACTH,MAAS,6DACTI,KAAQ,m5CACRyB,OAAU,WAGV1B,MAAS,OACTH,MAAS,0DACTI,KAAQ,sUACRyB,OAAU,YAGV1B,MAAS,OACTH,MAAS,qDACTI,KAAQ,69CACRyB,OAAU,YAIhBuB,aACEpD,MAAS,uCACTC,KAAQ,GACRC,WAEIC,MAAS,QACTH,MAAS,GACTK,SACAC,SAEIC,KAAQ,aACRC,MAAS,kBAMnB6C,YACErD,MAAS,mEACTC,KAAQ,GACRC,WAEIC,MAAS,MACTQ,UAAa,OACbX,MAAS,8CACTY,KAAQ,iBACRC,OAAU,uBACVC,QAAU,EACVC,QAAW,OACXC,aAEIb,MAAS,YACTH,MAAS,GACTiB,SAEId,MAAS,QACTS,KAAQ,OACRM,KAAQ,SACRC,UAAY,EACZC,YAAe,6EAGnBC,QACAnB,YACAoB,QAAW,8CACXF,YAAe,8BAGnBA,YAAe,sDACfG,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRC,OAAU,SACVvB,MAAS,SAEXwB,OAAU,QAGV1B,MAAS,OACTH,MAAS,GACTI,KAAQ,wQAGRD,MAAS,SACTQ,UAAa,UACbmB,YACAP,cACEC,KAAQ,OACRC,KAAQ,OACRC,SAAY,WACZC,KAAQ,OACRtB,MAAS,SAEXH,WAEIC,MAAS,WACTH,MAAS,GACT+B,OAAU,mKAGV5B,MAAS,OACTH,MAAS,kBACT2B,KAAQ,4DAGRxB,MAAS,OACTH,MAAS,oBACT2B,KAAQ,oJAGZK,KAAQ;AACRL,KAAQ,0sBACR3B,MAAS,sBACTiC,OAAU,MACVJ,OAAU,SACVO,OAAU,0DACVC,OAAU,WAGVlC,MAAS,QACTH,MAAS,YACTK,SACAC,SAEIH,MAAS,QACTI,KAAQ,UACRC,MAAS","file":"contents-jsoapi.min.js","sourcesContent":["var content = $.views.documentation.content;\r\n\r\ncontent.jsoapi = content.useStorage && $.parseJSON(localStorage.getItem(\"JsViewsDocTopics/jsoapi\")) ||\r\n{\r\n  \"jsoapi\": {\r\n    \"title\": \"Observing data changes: JsObservable\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"For an introductory overview see the [*Making observable changes*](#jsv-quickstart@observe-chg) and [*Responding to changes*](#jsv-quickstart@observe) sections in [*JsViews Quickstart*](#jsv-quickstart@observe).\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"Modifying data:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"hash\": \"$observable\",\r\n            \"label\": \"Observable objects and arrays\"\r\n          },\r\n          {\r\n            \"hash\": \"propchange\",\r\n            \"label\": \"Modify an object observably\"\r\n          },\r\n          {\r\n            \"hash\": \"arrchange\",\r\n            \"label\": \"Modify an array observably\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"Responding to changes in data:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"hash\": \"observeobjectsarrays\",\r\n            \"label\": \"Respond to data changes\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"hash\": \"computed\",\r\n            \"label\": \"Computed observables\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"propchange\": {\r\n    \"title\": \"Modify an object observably\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Use `$.observable(myObject)` to obtain an *observable object* -- which provides a *setProperty* method and a *removeProperty* method for making *observable changes* to the object:\\n\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"hash\": \"setprop\",\r\n            \"label\": \"$.observable(object).setProperty()\"\r\n          },\r\n          {\r\n            \"hash\": \"removeprop\",\r\n            \"label\": \"$.observable(obj).removeProperty()\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"(See also: *[Observable objects and arrays](#$observable)*)\"\r\n      }\r\n    ]\r\n  },\r\n  \"setprop\": {\r\n    \"title\": \"Making observable changes: $.observable(object).setProperty()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Modifying properties of an object, observably:\",\r\n        \"text\": \"If you pass an object to <a href=\\\"#$observable\\\">`$.observable()`</a>, you obtain an <em>observable</em> object (a very lightweight wrapper around your object) which provides a `setProperty()` method.\\n\\nCall the `setProperty()` method to make one or more observable changes to properties on your object (or on the nested objects in the 'object graph' below it...):\\n\\n```js\\n$.observable(person).setProperty(\\\"address.street\\\", \\\"Main St\\\");\\n```\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(myObject).setProperty(path, value)\",\r\n        \"name\": \"setProperty\",\r\n        \"object\": \"$.observable(object)\",\r\n        \"method\": true,\r\n        \"returns\": \"this\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"path\",\r\n                \"type\": \"string\",\r\n                \"optional\": false,\r\n                \"description\": \"Path (e.g. \\\"address.street\\\") or name (e.g. \\\"firstName\\\") for the property\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"value\",\r\n                \"type\": \"any\",\r\n                \"optional\": false,\r\n                \"description\": \"Modified value\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(book).setProperty(\\\"title\\\", \\\"Hope\\\");\",\r\n            \"description\": \"Modify the value of an object property\"\r\n          }\r\n        ],\r\n        \"description\": \"Make an observable change to an object property\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Observable property change, with data-bound template:\",\r\n        \"text\": \"Here is a sample, using a <a href=\\\"#linked-tag-syntax\\\">data-linked template</a> to respond to the observable property changes.\",\r\n        \"anchor\": \"sample-tmpl\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"template\",\r\n            \"title\": \"\",\r\n            \"markup\": \"Street: {^{:address.street}}\\\")\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Modify the value of a property on a chosen path:\",\r\n            \"code\": \"$.observable(person).setProperty(\\\"address.street\\\", \\\"Main St\\\");\\n\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  }\\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\\"address.street\\\", \\\"Main St\\\");\\n});\\n\\n$(\\\"#revert\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\\"address.street\\\", \\\"1st Ave\\\");\\n});\\n\\nvar tmpl = $.templates(\\\"Street: {^{:address.street}}\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\",\r\n        \"html\": \"<button id=\\\"modify\\\">set to new value</button>\\n<button id=\\\"revert\\\">set back to original value</button>\\n\\n<p id=\\\"result\\\"><p>\",\r\n        \"height\": \"90\",\r\n        \"title\": \"\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Observable property change, with onPropertyChange handler\",\r\n        \"text\": \"And here is a sample, using an event handler for <a href=\\\"#onpropchange\\\">propertyChange</a> to respond to the observable property changes.\",\r\n        \"anchor\": \"sample-onpropertychange\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$(person.address).on(\\\"propertyChange\\\", changeHandler); \"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Modify the value of a property on a chosen path:\",\r\n            \"code\": \"$.observable(person).setProperty(\\\"address.street\\\", \\\"1st Ave\\\");\\n\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  }\\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\\"address.street\\\", \\\"Main St\\\");\\n});\\n\\n$(\\\"#revert\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\\"address.street\\\", \\\"1st Ave\\\");\\n});\\n\\n$(person.address).on(\\\"propertyChange\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The '\\\" + eventArgs.path + \\\"' is '\\\" + eventArgs.value + \\\"'.\\\";\\n  $(\\\"#messages\\\").append(message + \\\"<br/>\\\");\\n}\",\r\n        \"html\": \"<button id=\\\"modify\\\">set to new value</button>\\n<button id=\\\"revert\\\">set back to original value</button>\\n\\n<p id=\\\"messages\\\"><p>\",\r\n        \"title\": \"\",\r\n        \"height\": \"110\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Observable property change, with $.observe(...)\",\r\n        \"text\": \"This sample uses <a href=\\\"#observe\\\">$.observe()</a> to listen to the observable property changes.\",\r\n        \"anchor\": \"sample-observe\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$.observe(person, \\\"address.street\\\", changeHandler);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Modify the value of a property on a chosen path:\",\r\n            \"code\": \"$.observable(person).setProperty(\\\"address.street\\\", \\\"Main St\\\");\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  }\\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\\"address.street\\\", \\\"Main St\\\");\\n});\\n\\n$(\\\"#revert\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\\"address.street\\\", \\\"1st Ave\\\");\\n});\\n\\n$.observe(person, \\\"address.street\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The '\\\" + eventArgs.path + \\\"' is '\\\" + eventArgs.value + \\\"'.\\\";\\n  if (ev.data) {\\n    message += \\\"\\\\n\\\\nThe full path is '\\\" + ev.data.fullPath + \\\"'.\\\";\\n  }\\n  $(\\\"#messages\\\").append(message + \\\"<br/>\\\");\\n}\",\r\n        \"html\": \"<button id=\\\"modify\\\">set to new value</button>\\n<button id=\\\"revert\\\">set back to original value</button>\\n\\n<p id=\\\"messages\\\"><p>\",\r\n        \"height\": \"110\",\r\n        \"title\": \"\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"<hr/>\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"API: Changing multiple properties in one call:\",\r\n        \"text\": \"You can make observable changes to one or more properties in one call to `setProperty()` as follows:\",\r\n        \"anchor\": \"api-multiple\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(myObject).setProperty({prop1: ..., prop2: ..., ...})\",\r\n        \"name\": \"setProperty\",\r\n        \"object\": \"$.observable(object)\",\r\n        \"method\": true,\r\n        \"returns\": \"this\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"newValues\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"Path-value pairs for modified properties, e.g. {name: \\\"newName\\\", \\\"address.street\\\": \\\"newStreet\\\"}\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(person).setProperty(newValues);\",\r\n            \"description\": \"Modify the values of  one or more object properties\"\r\n          }\r\n        ],\r\n        \"description\": \"\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        }\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Changing multiple properties in one call:\",\r\n        \"text\": \"In this sample we make changes to properties on two different objects, with a single call to `setProperty()`.\\n\\nWe register a single listener for the observable property changes on both objects -- with one call to <a href=\\\"#observe\\\">`$.observe()`</a>.\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Modify two properties, on different paths:\",\r\n            \"code\": \"$.observable(person).setProperty(\\n  {\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\"\\n  }\\n);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Observe both changes with a single $.observe() handler:\",\r\n            \"code\": \"$.observe(person, \\\"name\\\", \\\"address.street\\\", changeHandler); \"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  }\\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n\\n  $.observable(person).setProperty(\\n    {\\n      name: \\\"Hermione\\\",\\n      \\\"address.street\\\": \\\"Main St\\\"\\n    }\\n  );\\n\\n});\\n\\n$(\\\"#revert\\\").on(\\\"click\\\", function() {\\n\\n  $.observable(person).setProperty(\\n    {\\n      name: \\\"Pete\\\",\\n      \\\"address.street\\\": \\\"1st Ave.\\\"\\n    }\\n  );\\n\\n});\\n\\n$.observe(person, \\\"name\\\", \\\"address.street\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The '\\\" + eventArgs.path + \\\"' is '\\\" + eventArgs.value + \\\"'.\\\";\\n  if (ev.data) {\\n    message += \\\"\\\\n\\\\nThe full path is '\\\" + ev.data.fullPath + \\\"'.\\\";\\n  }\\n  $(\\\"#messages\\\").append(message + \\\"<br/>\\\");\\n}\",\r\n        \"html\": \"<button id=\\\"modify\\\">Set new values</button>\\n<button id=\\\"revert\\\">Return to original values</button>\\n\\n<p id=\\\"messages\\\"><p>\",\r\n        \"title\": \"\",\r\n        \"height\": \"150\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"See also:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"removeprop\",\r\n            \"label\": \"$.observable(object).removeProperty()\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"arrchange\": {\r\n    \"title\": \"Modify an array observably\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Use `$.observable(myArray)` to obtain an <em>observable array</em> -- which provides methods for making <em>observable changes</em> to the array:\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"hash\": \"insert\",\r\n            \"label\": \"$.observable(array).insert()\"\r\n          },\r\n          {\r\n            \"hash\": \"remove\",\r\n            \"label\": \"$.observable(array).remove()\"\r\n          },\r\n          {\r\n            \"hash\": \"move\",\r\n            \"label\": \"$.observable(array).move()\"\r\n          },\r\n          {\r\n            \"hash\": \"refresh\",\r\n            \"label\": \"$.observable(array).refresh()\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"(See also: *[Observable objects and arrays](#$observable)*)\\n\"\r\n      }\r\n    ]\r\n  },\r\n  \"insert\": {\r\n    \"title\": \"Making observable changes: $.observable(array).insert()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Changing an array observably: inserting items\",\r\n        \"text\": \"If you pass an array to <a href=\\\"#$observable\\\">`$.observable()`</a>, you obtain an <em>observable</em> array (a very lightweight wrapper around your array) which provides methods for modifying the array <em>observably</em>, including an <b>`insert()`</b> method:\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(myArray).insert(index, insertedItems)\",\r\n        \"name\": \"insert\",\r\n        \"object\": \"$.observable(array)\",\r\n        \"method\": true,\r\n        \"returns\": \"this\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"index\",\r\n                \"type\": \"integer\",\r\n                \"optional\": true,\r\n                \"description\": \"Optional index at which insertion will begin. If not specified, items are appended.\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"insertedItems\",\r\n                \"type\": \"any\",\r\n                \"optional\": false,\r\n                \"description\": \"item, or array of items, to be inserted\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(people).insert(3, insertedItems);\",\r\n            \"description\": \"Observably append or insert an item, or set of items\"\r\n          }\r\n        ],\r\n        \"description\": \"Insert or append one or more items to an array\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Appending to an array:\",\r\n        \"text\": \"Here is a sample using `insert()` to append an item to an array.\\n\\nA <a href=\\\"#linked-tag-syntax\\\">data-linked template</a> responds to the observable array changes.\",\r\n        \"anchor\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"template\",\r\n            \"title\": \"\",\r\n            \"markup\": \"var tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Append an item:\",\r\n            \"code\": \"$.observable(things).insert(\\n  {id: \\\"item\\\" + count++}\\n);\"\r\n          }\r\n        ],\r\n        \"code\": \"var things = [{id: \\\"item1\\\"}, {id: \\\"item2\\\"}],\\n  count = 3;\\n\\n$(\\\"#append\\\").on(\\\"click\\\", function() {\\n  $.observable(things).insert(\\n    {id: \\\"item\\\" + count++}\\n  );\\n});\\n\\n$(\\\"#insert2\\\").on(\\\"click\\\", function() {\\n  $.observable(things).insert(\\n    [\\n      {id: \\\"item\\\" + count++},\\n      {id: \\\"item\\\" + count++}\\n    ]\\n  );\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"append\\\">Append an item</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\",\r\n        \"height\": \"150\",\r\n        \"title\": \"\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Append one or more items\",\r\n        \"text\": \"Here we'll add an event handler for <a href=\\\"#onarrchange\\\">arrayChange</a> to respond to the observable array changes, in addition to the template:\",\r\n        \"anchor\": \"append-multiple\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$([things]).on(\\\"arrayChange\\\", changeHandler);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Append two items:\",\r\n            \"code\": \"$.observable(things).insert(\\n  [\\n    {id: \\\"item\\\" + count++},\\n    {id: \\\"item\\\" + count++}\\n  ]\\n);\"\r\n          }\r\n        ],\r\n        \"code\": \"var things = [{id: \\\"item1\\\"}, {id: \\\"item2\\\"}],\\n  count = 3;\\n\\n$(\\\"#append1\\\").on(\\\"click\\\", function() {\\n  $.observable(things).insert(\\n    {id: \\\"item\\\" + count++}\\n  );\\n});\\n\\n$(\\\"#append2\\\").on(\\\"click\\\", function() {\\n  $.observable(things).insert(\\n    [\\n      {id: \\\"item\\\" + count++},\\n      {id: \\\"item\\\" + count++}\\n    ]\\n  );\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\\n\\n$([things]).on(\\\"arrayChange\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = eventArgs.items.length + \\\" item(s) added at index: \\\" + eventArgs.index;\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"append1\\\">Append an item</button>\\n  <button id=\\\"append2\\\">Append two items</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Changes:</label>\\n  <div class=\\\"messages\\\"></div>\\n</div>\",\r\n        \"height\": \"150\",\r\n        \"title\": \"\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Inserting items at a chosen index\",\r\n        \"text\": \"Here we modify the sample above, by specifying the index where we want to insert, rather than simply appending. We'll also show the alternative <a href=\\\"#observe\\\">`$.observe()`</a> API for attaching our handler:\",\r\n        \"anchor\": \"insert-at\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$.observe(things, changeHandler);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Insert a set of items at a chosen index:\",\r\n            \"code\": \"$.observable(things).insert(\\n  index,\\n  items\\n);\"\r\n          }\r\n        ],\r\n        \"code\": \"var things = [{id: \\\"item1\\\"}, {id: \\\"item2\\\"}],\\n  count = 3;\\n\\n$(\\\"#insert\\\").on(\\\"click\\\", function() {\\n  $.observable(things).insert(\\n    1,\\n    {id: \\\"item\\\" + count++}\\n  );\\n});\\n\\n$(\\\"#prepend\\\").on(\\\"click\\\", function() {\\n  $.observable(things).insert(\\n    0,\\n    [\\n      {id: \\\"item\\\" + count++},\\n      {id: \\\"item\\\" + count++}\\n    ]\\n  );\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\\n\\n$.observe(things, changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = eventArgs.items.length + \\\" item(s) added at index: \\\" + eventArgs.index;\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"insert\\\">Insert item at index 1</button>\\n  <button id=\\\"prepend\\\">Prepend 2 items</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Changes:</label>\\n  <div class=\\\"messages\\\"></div>\\n</div>\",\r\n        \"height\": \"150\",\r\n        \"title\": \"\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      }\r\n    ]\r\n  },\r\n  \"remove\": {\r\n    \"title\": \"Making observable changes: $.observable(array).remove()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Changing an array observably: removing items\",\r\n        \"text\": \"If you pass an array to <a href=\\\"#$observable\\\">`$.observable()`</a>, you obtain an <em>observable</em> array (a very lightweight wrapper around your array) which provides methods for modifying the array <em>observably</em>, including a <b>`remove()`</b> method:\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(myArray).remove(index, numToRemove)\",\r\n        \"name\": \"remove\",\r\n        \"object\": \"$.observable(array)\",\r\n        \"method\": true,\r\n        \"returns\": \"this\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"index\",\r\n                \"type\": \"integer\",\r\n                \"optional\": true,\r\n                \"description\": \"Optional index at which removal will begin. If not specified, items are removed from the end of the array.\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"numToRemove\",\r\n                \"type\": \"integer\",\r\n                \"optional\": true,\r\n                \"description\": \"Number of items to be removed. If not specified, one item is removed.\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(people).remove(3, 2);\",\r\n            \"description\": \"Observably remove one or more items from an array\"\r\n          }\r\n        ],\r\n        \"description\": \"Remove one or more items from an array\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Removing the last item in the array\",\r\n        \"text\": \"Here is a sample using `remove()` to remove the last item to an array.\\n\\nA <a href=\\\"#linked-tag-syntax\\\">data-linked template</a> responds to the observable array changes.\",\r\n        \"anchor\": \"remove-last\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"template\",\r\n            \"title\": \"\",\r\n            \"markup\": \"var tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Remove the last item:\",\r\n            \"code\": \"$.observable(things).remove();\"\r\n          }\r\n        ],\r\n        \"code\": \"var things = [\\n  {id: \\\"item1\\\"},\\n  {id: \\\"item2\\\"},\\n  {id: \\\"item3\\\"}\\n];\\n\\n$(\\\"#remove\\\").on(\\\"click\\\", function() {\\n  $.observable(things).remove();\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"remove\\\">Remove last item</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\",\r\n        \"height\": \"130\",\r\n        \"title\": \"\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Removing an item at a specified index:\",\r\n        \"text\": \"Here we'll add an event handler for <a href=\\\"#onarrchange\\\">arrayChange</a> to respond to the observable array changes, in addition to the template:\\n\\nAnd we'll remove an item at a specified index.\",\r\n        \"anchor\": \"remove-at\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$([things]).on(\\\"arrayChange\\\", changeHandler);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Remove item at index 0 or index 1:\",\r\n            \"code\": \"$.observable(things).remove(0);\\n...\\n$.observable(things).remove(1);\\n\"\r\n          }\r\n        ],\r\n        \"code\": \"var things = [\\n  {id: \\\"item1\\\"},\\n  {id: \\\"item2\\\"},\\n  {id: \\\"item3\\\"}\\n];\\n\\n$(\\\"#remove0\\\").on(\\\"click\\\", function() {\\n  $.observable(things).remove(0);\\n});\\n\\n$(\\\"#remove1\\\").on(\\\"click\\\", function() {\\n  $.observable(things).remove(1);\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\\n\\n$([things]).on(\\\"arrayChange\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = eventArgs.items.length + \\\" item(s) removed at index: \\\" + eventArgs.index;\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"remove0\\\">Remove item 0</button>\\n  <button id=\\\"remove1\\\">Remove item 1</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Changes:</label>\\n  <div class=\\\"messages\\\"></div>\\n</div>\",\r\n        \"height\": \"130\",\r\n        \"title\": \"Observable array change &ndash; remove item at chosen index\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Removing one or more items at a chosen index\",\r\n        \"text\": \"Here we modify the sample above, by specifying the number of items to remove. We'll also show the alternative <a href=\\\"#observe\\\">`$.observe()`</a> API for attaching our handler:\",\r\n        \"anchor\": \"remove-multiple\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$.observe(things, changeHandler);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Remove two items at index 0:\",\r\n            \"code\": \"$.observable(things).remove(0, 2);\\n\"\r\n          }\r\n        ],\r\n        \"code\": \"var things = [\\n  {id: \\\"item1\\\"},\\n  {id: \\\"item2\\\"},\\n  {id: \\\"item3\\\"},\\n  {id: \\\"item4\\\"}\\n];\\n\\n$(\\\"#remove0\\\").on(\\\"click\\\", function() {\\n  $.observable(things).remove(0, 2);\\n});\\n\\n$(\\\"#remove1\\\").on(\\\"click\\\", function() {\\n  $.observable(things).remove(1);\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\\n\\n$.observe(things, changeHandler);\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = eventArgs.items.length + \\\" item(s) removed at index: \\\" + eventArgs.index;\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"remove0\\\">Remove 2 items at 0</button>\\n  <button id=\\\"remove1\\\">Remove item 1</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Changes:</label>\\n  <div class=\\\"messages\\\"></div>\\n</div>\",\r\n        \"height\": \"150\",\r\n        \"title\": \"\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      }\r\n    ]\r\n  },\r\n  \"refresh\": {\r\n    \"title\": \"Making observable changes: $.observable(array).refresh()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Changing an array observably: replacing all the items\",\r\n        \"text\": \"If you pass an array to <a href=\\\"#$observable\\\">`$.observable()`</a>, you obtain an <em>observable</em> array (a very lightweight wrapper around your array) which provides methods for modifying the array <em>observably</em>, including a <b>`refresh()`</b> method:\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(myArray).refresh(newItems)\",\r\n        \"name\": \"refresh\",\r\n        \"object\": \"$.observable(array)\",\r\n        \"method\": true,\r\n        \"returns\": \"this\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"index\",\r\n                \"type\": \"array\",\r\n                \"optional\": false,\r\n                \"description\": \"Array containing the new set of items\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(people).refresh(newItems);\",\r\n            \"description\": \"Observably refresh the contents of an array\"\r\n          }\r\n        ],\r\n        \"description\": \"Refresh an array with a modified or sorted set of items\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Refreshing items in an array (replace or sort)\",\r\n        \"text\": \"Here is a sample using `refresh()` to replace items within an array.\\n\\nA <a href=\\\"#linked-tag-syntax\\\">data-linked template</a> responds to the observable array changes. And we'll also add an event handler for <a href=\\\"#onarrchange\\\">arrayChange</a> to respond to the observable array changes:\",\r\n        \"anchor\": \"refresh\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$([things]).on(\\\"arrayChange\\\", changeHandler); \"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Replacing with the same items in different order:\",\r\n            \"code\": \"$.observable(things).refresh(\\n  things.slice().reverse() // copy array and reverse it\\n);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Replacing with a different set of items\",\r\n            \"code\": \"$.observable(things).refresh(\\n  (things.length === 5 ? otherItems : items)\\n);\\n\"\r\n          }\r\n        ],\r\n        \"code\": \"var items = [\\n    {id: \\\"item0\\\"},\\n    {id: \\\"item1\\\"},\\n    {id: \\\"item2\\\"},\\n    {id: \\\"item3\\\"},\\n    {id: \\\"item4\\\"}\\n  ],\\n  otherItems = [\\n    {id: \\\"otherItem0\\\"},\\n    {id: \\\"otherItem1\\\"},\\n    {id: \\\"otherItem2\\\"}\\n  ],\\n  things = [\\n    items[0],\\n    items[1],\\n    items[2],\\n    items[3],\\n    items[4]\\n  ];\\n\\n$(\\\"#sort\\\").on(\\\"click\\\", function() {\\n  $.observable(things).refresh(\\n    things.slice().reverse() // copy array and reverse it\\n  );\\n});\\n\\n$(\\\"#replace\\\").on(\\\"click\\\", function() {\\n  $.observable(things).refresh(\\n    (things.length === 5 ? otherItems : items)\\n  );\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\\n\\n$([things]).on(\\\"arrayChange\\\", changeHandler); \\n\\nvar message;\\n\\nfunction changeHandler(ev, eventArgs) {\\n  if (eventArgs.refresh) {\\n    message = message || \\\"<em>Array.refresh() actions:</em>\\\";\\n    message += \\\" \\\" + eventArgs.change;\\n  } else if (eventArgs.change === \\\"refresh\\\") {\\n    message += \\\"<br/><em>Previous length:</em> \\\" + eventArgs.oldItems.length\\n      + \\\". <em>New length:</em> \\\" + ev.target.length + \\\"<br/><br/>\\\";\\n    $(\\\".messages\\\").append(message);\\n    message = \\\"\\\";\\n  }\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"sort\\\">Reverse sort the items</button><br/>\\n  <button id=\\\"replace\\\">Replace the items</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Changes:</label>\\n  <div class=\\\"messages\\\"></div>\\n</div>\",\r\n        \"height\": \"200\",\r\n        \"title\": \"\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"*Note:* Calling the `refresh()` method will in fact trigger multiple observable change events (see [`onArrayChange`](#onarrchange)):\\n\\n- First, conversion from the current array items to the new refreshed set of items will be broken down into a sequence of `insert()`, `remove()` and `move()` operations, and each will trigger a corresponding event.<br/>The `eventArgs` object for each of these events will have an additional property: `refresh` = `true` (together with the usual `change`=`\\\"insert\\\"` / `\\\"remove\\\"` / `\\\"move\\\"` etc.)\\n- Secondly, after those supplementary events, a *change*=`\\\"refresh\\\"` event will be triggered, which will also have an `oldItems` property\"\r\n      }\r\n    ]\r\n  },\r\n  \"move\": {\r\n    \"title\": \"Making observable changes: $.observable(array).move()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Changing an array observably: moving items\",\r\n        \"text\": \"If you pass an array to <a href=\\\"#$observable\\\">`$.observable()`</a>, you obtain an <em>observable</em> array (a very lightweight wrapper around your array) which provides methods for modifying the array <em>observably</em>, including a <b>`move()`</b> method:\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(myArray).move(oldIndex, newIndex, numToMove)\",\r\n        \"name\": \"move\",\r\n        \"object\": \"$.observable(array)\",\r\n        \"method\": true,\r\n        \"returns\": \"this\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"oldIndex\",\r\n                \"type\": \"integer\",\r\n                \"optional\": false,\r\n                \"description\": \"Optional index at which insertion will begin. If not specified, items are appended.\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"newIndex\",\r\n                \"type\": \"integer\",\r\n                \"optional\": false,\r\n                \"description\": \"item, or array of items, to be inserted\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"numToMove\",\r\n                \"type\": \"integer\",\r\n                \"optional\": true,\r\n                \"description\": \"\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(people).move(3, 5, 2);\",\r\n            \"description\": \"Observably move an item, or sequence of items, in an array.\"\r\n          }\r\n        ],\r\n        \"description\": \"Move one or more items in an array\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Moving items in an array\",\r\n        \"text\": \"Here is a sample using `move()` to move items within an array.\\n\\nA <a href=\\\"#linked-tag-syntax\\\">data-linked template</a> responds to the observable array changes. And we'll also add an event handler for <a href=\\\"#onarrchange\\\">arrayChange</a> to respond to the observable array changes:\",\r\n        \"anchor\": \"move\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"\",\r\n            \"code\": \"$([things]).on(\\\"arrayChange\\\", changeHandler); \"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Moving one item from index 2 to index 0:\",\r\n            \"code\": \"$.observable(things).move(2, 0);\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Moving two items from index 0 to index 1:\",\r\n            \"code\": \"$.observable(things).move(0, 1, 2);\"\r\n          }\r\n        ],\r\n        \"code\": \"var things = [\\n  {id: \\\"item0\\\"},\\n  {id: \\\"item1\\\"},\\n  {id: \\\"item2\\\"},\\n  {id: \\\"item3\\\"},\\n  {id: \\\"item4\\\"}\\n];\\n\\n$(\\\"#move1\\\").on(\\\"click\\\", function() {\\n  $.observable(things).move(2, 0);\\n});\\n\\n$(\\\"#move2\\\").on(\\\"click\\\", function() {\\n  $.observable(things).move(0, 3, 2);\\n});\\n\\nvar tmpl = $.templates(\\\"id: {{:id}}<br/>\\\");\\n\\ntmpl.link(\\\"#result\\\", things);\\n\\n$([things]).on(\\\"arrayChange\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = eventArgs.items.length + \\\" item(s) moved from index: \\\"\\n  + eventArgs.oldIndex + \\\" to index: \\\" + eventArgs.index;\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"move1\\\">Move 1 item from index 2 to 0</button><br/>\\n  <button id=\\\"move2\\\">Move 2 items from index 0 to 3</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Changes:</label>\\n  <div class=\\\"messages\\\"></div>\\n</div>\",\r\n        \"height\": \"190\",\r\n        \"title\": \"\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      }\r\n    ]\r\n  },\r\n  \"observeobjectsarrays\": {\r\n    \"title\": \"Respond to data changes\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"The following API topics provide ways of attaching/removing event handlers to respond to observable data changes:\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"hash\": \"onpropchange\",\r\n            \"label\": \"onPropertyChange\"\r\n          },\r\n          {\r\n            \"hash\": \"onarrchange\",\r\n            \"label\": \"onArrayChange\"\r\n          },\r\n          {\r\n            \"hash\": \"observe\",\r\n            \"label\": \"$.observe()\"\r\n          },\r\n          {\r\n            \"hash\": \"unobserve\",\r\n            \"label\": \"$.unobserve()\"\r\n          },\r\n          {\r\n            \"hash\": \"observeAll\",\r\n            \"label\": \"$.observable().observeAll()\"\r\n          },\r\n          {\r\n            \"hash\": \"unobserveAll\",\r\n            \"label\": \"$.observable().unobserveAll()\"\r\n          },\r\n          {\r\n            \"hash\": \"namespaces\",\r\n            \"label\": \"namespaces (advanced)\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"onpropchange\": {\r\n    \"title\": \"Event Handler: onPropertyChange\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"JsViews and JsObservable raise a jQuery event: <em>\\\"propertyChange\\\"</em>, whenever an object changes observably.\\n\\nTo handle the *propertyChange* changes you have two alternatives:\\n- use jQuery `.on()` to attach an event handler to the object\\n- use [`$.observe()`](#observe) or  [`.observeAll()`](#observeAll) to associate a handler with the object, or with a *[path](#paths)* including the object\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Using jQuery .on()\",\r\n        \"text\": \"```js\\n$(myObject).on(\\\"propertyChange\\\", myHandler);\\n```\\n\\n(See *[Handling property change events](#onpropchange@on-propertychange)* sample below)\",\r\n        \"anchor\": \"jquery-on\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Using <a href=\\\"#observe\\\">$.observe()</a> or <a href=\\\"#observeAll\\\">.observeAll()</a>\",\r\n        \"text\": \"```js\\n$.observe(myObject, \\\"*\\\" , myHandler); \\n// Choose path \\\"*\\\" to listen to changes on all properties of myObject \\n```\\n\\nThis approach also brings some advantages if you want to listen to changes on more than one object or array, or if you want to listen to \\\"deep changes\\\" on a [path](#paths) -- i.e. changes not only on the leaf, but on objects higher up the path... \\n\\nAlternatively you can use:\\n\\n```js\\n$.observable(myObject).observeAll(myHandler);\\n// Listen to changes on all properties and nested properties of myObject at any depth\\n```\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"function myHandler(ev, eventArgs) { ... }\",\r\n        \"name\": \"myHandler\",\r\n        \"object\": \"\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"ev\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"jQuery event object &ndash; see <a href=\\\"#onpropchange@args\\\">below</a>\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"eventArgs\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"JsViews propertyChange event object &ndash; see <a href=\\\"#onpropchange@args\\\">below</a>\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$(person).on(\\\"propertyChange\\\", myHandler); \",\r\n            \"description\": \"Handler for JsViews observable property change events\"\r\n          }\r\n        ],\r\n        \"description\": \"An event handler for propertyChange events\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Arguments of the propertyChange event handler\",\r\n        \"text\": \"```js\\nfunction changeHandler(ev, eventArgs) { ... }\\n```\\n\\n**The first argument (`ev`) is the _jQuery event object_**\\n\\nThe properties include:\\n\\n- `target`: the object which changed\\n- `namespace`: The `setProperty()` [namespace](#namespaces@handler)\\n- `data`: *JsViews metadata*:\\n\\n-- where *`ev.data` JsViews metadata* corresponds to the `observe()` or `observeCall()` call, with properties that include:\\n\\n- `ns`: The handler [namespace](#namespaces@handler)\\n- `fullPath`: the full path –- such as `\\\"team.manager.address.street\\\"`\\n- `prop`: the property being changed -– such as `\\\"manager\\\"`\\n- `paths`: array of 'ongoing' paths -- when doing 'deep' binding<br/>(So if this property is part of a deep path such as `\\\"team.manager^address.street\\\"`, and `manager` is being changed, the `paths` will include `[\\\"address^street\\\"]`)\\n- `observeAll`: *access to additional metadata*\\n\\n-- where *`ev.data.observeAll`*, for `observeAll()` calls, provides methods:\\n\\n- *`ev.data.observeAll.path()`*: returns path to object being changed, e.g. `\\\"root.team\\\"` \\n- *`ev.data.observeAll.parents()`*: returns 'parent objects' to object being changed, e.g. `[team, model]`\\n\\n**The second argument (`eventArgs`) is the _JsViews event object for property changes_**\\n\\nThe properties are:\\n\\n- *change*: the string `\\\"set\\\"`\\n- *path*: e.g. '\\\"manager\\\"'\\n- *value*: new value of property being set\\n- *oldValue*: previous value of property\",\r\n        \"anchor\": \"args\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"Add a handler for <b>propertyChange</b> events on the <b>person</b> object:\",\r\n            \"text\": \"```js\\n$(person).on(\\\"propertyChange\\\", changeHandler); \\n```\\n\\n```js\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The new '\\\" + eventArgs.path + \\\"' is '\\\"\\n    + $.views.converters.encode(eventArgs.value + \\\"'.\\\");\\n    // Note that we encode < > and & as HTML entities for display\\n  ...\\n}\\n```\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  }\\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\n    {\\n      name: \\\"Hermione\\\",\\n      \\\"address.street\\\": \\\"Main St\\\"\\n    }\\n  );\\n});\\n\\n$(\\\"#revert\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\n    {\\n      name: \\\"Pete\\\",\\n      \\\"address.street\\\": \\\"1st Ave.\\\"\\n    }\\n  );\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\nvar tmpl = $.templates(\\n   \\\"Name: <input data-link=\\\\\\\"name\\\\\\\" /><br/>\\\"\\n + \\\"Street: <input data-link=\\\\\\\"address.street\\\\\\\" />\\\"\\n);\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\n$(person).on(\\\"propertyChange\\\", changeHandler); \\n\\n$(person.address).on(\\\"propertyChange\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The new '\\\" + eventArgs.path + \\\"' is '\\\"\\n    + $.views.converters.encode(eventArgs.value + \\\"'.\\\"); // Encode < > and & for display\\n\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">set to new values</button><br/>\\n  <button id=\\\"revert\\\">set back to original values</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Change Log:</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\",\r\n        \"height\": \"200\",\r\n        \"title\": \"Handling property change events\",\r\n        \"anchor\": \"on-propertychange\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      }\r\n    ]\r\n  },\r\n  \"onarrchange\": {\r\n    \"title\": \"Event Handler: onArrayChange\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"JsViews and JsObservable raise a jQuery event: *\\\"arrayChange\\\"*, whenever an array changes observably.\\n\\nTo handle the *arrayChange* changes you have two alternatives:\\n\\n- use jQuery `.on()` to attach an event handler to the array\\n- use [`$.observe()`](#observe) to associate a handler with the array, or with a *path* including the array\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Using jQuery .on()\",\r\n        \"text\": \"```js\\n$([myArray]).on(\\\"arrayChange\\\", myHandler);\\n```\\n\\n(Note the syntax with the wrapped array: `$([myArray]).on();`. If you write `$(myArray).on();` you will be listening to each item in the array, not to the array itself).\",\r\n        \"anchor\": \"jquery-on\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Using <a href=\\\"#observe\\\">$.observe()</a>\",\r\n        \"text\": \"```js\\n$.observe(myArray, myHandler); \\n```\\n\\nThis approach also brings some advantages if you want to listen to changes on more than one object or array, or if you want to listen to \\\"deep changes\\\" on a path -- i.e. changes not only on the leaf, but on objects higher up the path...\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"function myHandler(ev, eventArgs) { ... }\",\r\n        \"name\": \"myHandler\",\r\n        \"object\": \"\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"ev\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"jQuery event object &ndash; see <a href=\\\"#onarrchange@args\\\">below</a>\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"eventArgs\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"JsViews arrayChange event object &ndash; see <a href=\\\"#onarrchange@args\\\">below</a>\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$([myArray]).on(\\\"arrayChange\\\", myHandler); \",\r\n            \"description\": \"Handler for JsViews observable array change events\"\r\n          }\r\n        ],\r\n        \"description\": \"An event handler for arrayChange events\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Arguments of the arrayChange event handler\",\r\n        \"text\": \"```js\\nfunction changeHandler(ev, eventArgs) { ... }\\n```\\n\\n**The first argument (`ev`) is the _jQuery event object_**\\n\\nThe properties include:\\n\\n- `target`: the object which changed\\n- `namespace`: The *insert()* / *remove()* / *move()* / *refresh()* [namespace](#namespaces@handler)\\n- `data`: *JsViews metadata*:\\n\\n-- where *`ev.data` JsViews metadata* corresponds to the `observe()` or `observeCall()` call, with properties that include:\\n\\n- `ns`: The handler [namespace](#namespaces@handler)\\n- `observeAll`: *access to additional metadata*\\n\\n-- where *`ev.data.observeAll`*, for `observeAll()` calls, provides methods:\\n\\n- *`ev.data.observeAll.path()`*: returns path to object being changed - e.g. `\\\"root.team\\\"` \\n- *`ev.data.observeAll.parents()`*: returns 'parent objects' to object being changed, e.g. `[team, model]`\\n\\n**The second argument (`eventArgs`) is the _JsViews event object for array changes_**\\n\\nThe properties are specific to the *'change'* type:\\n\\n- For *insert()*: `index` and `items`. (With `change`=`\\\"insert\\\"`)\\n- For *remove()*: `index` and `numToRemove`. (With `change`=`\\\"remove\\\"`)\\n- For *move()*: `oldIndex`, `index` and `items`. (With `change`=`\\\"move\\\"`)\\n- For *refresh()*, multiple events will be triggered:\\n  - First, conversion from the current array items to the new refreshed set of items will be broken down into a sequence of *insert()*, *remove()* and *move()* operations, and each will trigger a corresponding event.<br/>The `eventArgs` object for each of these events will have an additional property: `refresh` = `true` (together with the usual `change`=`\\\"insert\\\"` / `\\\"remove\\\"` / `\\\"move\\\"` etc.)\\n  - Secondly, after those supplementary events, a `change`=`\\\"refresh\\\"` event will be triggered, which will also have an `oldItems` property\",\r\n        \"anchor\": \"args\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Samples for the <b>handling array change events</b>:\",\r\n        \"text\": \"Each of the following API topics includes samples showing the *arrayChange* event handler for the corresponding type of array change:\\n\\n- [$.observable(array).insert()](#insert)\\n- [$.observable(array).remove()](#remove)\\n- [$.observable(array).move()](#move)\\n- [$.observable(array).refresh()](#refresh)\\n\"\r\n      }\r\n    ]\r\n  },\r\n  \"observe\": {\r\n    \"title\": \"Observing data: $.observe()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Whenever objects or arrays are changed observably, JsViews raises the corresponding [propertyChange](#onpropchange) or [arrayChange](#onarrchange) jQuery event.\\n\\nData-linked templates respond to those events automatically, but if you want to run code in response to data-change events you have two alternatives:\\n\\n- use jQuery `.on()` to attach the [propertyChange](#onpropchange) or [arrayChange](#onarrchange) event handler to any object or array you want to 'listen to'\\n- use `$.observe()` to associate a handler with one or more objects, arrays, or *paths*\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Using $.observe()\",\r\n        \"text\": \"```js\\n$.observe(myObjectOrArray, ..., myHandler);\\n```\\n\\nThis approach allows you to register a single handler to listen to changes on multiple targets, which can include both objects and arrays.\",\r\n        \"anchor\": \"observe\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Examples:\",\r\n        \"text\": \"1\\\\. Observe changes to a specific property:\\n\\n```js\\n$.observe(person, \\\"firstName\\\", myHandler);\\n```\\n\\n2\\\\. Observe changes to a specific property <em>of type array</em>:\\n\\n```js\\n$.observe(person, \\\"phones\\\", myHandler);\\n```\\n\\nHere <em>myHandler</em> will handle both:\\n<ul>\\n<li>array changes, and</li> \\n<li>setting a new value to the property (switching to a new array, or setting to null or undefined)</li>\\n</ul>\\n\\n3\\\\. Observe changes to <em>any</em> property on an object:\\n\\n```js\\n$.observe(person, \\\"*\\\", myHandler);\\n```\\n\\n(For properties of type array, such as `person.phones`, this will observe both setting/removing the array property, *and* array changes on that property)\\n\\n4\\\\. Observe changes on an array:\\n\\n```js\\n$.observe(person.phones, myHandler); \\n```\\n\\n5\\\\. Observe multiple objects/properties/arrays:\\n\\n```js\\n$.observe(person, \\\"lastName\\\", \\\"phones\\\", \\\"address.street\\\", myHandler);\\n```\\n\\nHere <em>myHandler</em> will handle both:\\n<ul>\\n<li>changes to <code>lastName</code></li> \\n<li>array changes to the current <code>phones</code> (array), or changes if a new array is assigned to the <code>phones</code> property</li>\\n<li>changes to the <code>street</code> property of the <code>address</code> property of <code>person</code></li>\\n</ul>\\n\\n6\\\\. Observe paths under more than object:\\n\\n```js\\n$.observe(person1, \\\"lastName\\\", \\\"address.*\\\", person2, \\\"firstName\\\", person3, \\\"*\\\", \\\"address.*\\\", myHandler);\\n```\\n\\nHere <em>myHandler</em> handles:\\n<ul>\\n<li>for <code>person1</code>: changes to <code>lastName</code> and any <code>address</code> property</li> \\n<li>for <code>person2</code>: changes to <code>firstName</code></li>\\n<li>for <code>person3</code>: changes to any property of the <code>person3</code> object itself, and to any property of the <code>person3.address</code> object</li>\\n</ul>\\n\",\r\n        \"anchor\": \"paths\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Chained paths: leaf changes or deep changes\",\r\n        \"text\": \"By default you listen to the leaf of a path, but you can specify if you want to listen also to changes on objects higher up the path...\\n\\nFor example, here:\\n\\n```js\\n$.observe(team, \\\"manager.address.street\\\", myHandler);\\n```\\n\\n<em>myHandler</em> will be called if the value of the `street` property of the `team.manager.address` object changes. So it is listening to leaf changes on the path <em>\\\"manager.address.street\\\"</em>.\\n\\nIt will not be called if the `team.manager` property is swapped to a different `manager` object, or if the `team.manager.address` property is swapped to a different `address` object.\\n\\nBut by a simple syntax change, the path can be made to listen to changes not only on the leaf property, but also changes on objects higher up the path. These are <em>deep changes</em> on the path: \\n\\nFor example, this path:\\n\\n```js\\n$.observe(team, \\\"manager.address^street\\\", myHandler);\\n```\\n\\nwill listen to changes to the `street` property of `address`, or the `address` property of `manager`.\\n\\nAnd the following:\\n\\n```js\\n$.observe(team, \\\"manager^address.street\\\", myHandler);\\n```\\n\\nwill listen to changes to the `street` property of `address`, the `address` property of `manager`, <em><b>and</b></em> the `manager` property of `team`.\\n\\nSimply replace a `.` with a `^` at the level up to which you want to listen to changes.\\n\\n(If you know that in your app the objects higher up the path will never change dynamically, then stick with the default <em>leaf</em> binding, since that will provide better perf optimization...)\\n\\nSee [samples](#observe@samples) below.\\n\\nSee also the related discussion and examples on [data-linking to deep changes, within data-linked templates](#linked-paths@deep).\",\r\n        \"anchor\": \"deep\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Observing <b>all</b> changes under an object\",\r\n        \"text\": \"The `*` (*any* wild card symbol) let's you observe changes to ***any*** property (e.g. `\\\"manager.*\\\"` for changes to any property of `manager`).\\n\\nSimilarly the `**` (*all* wild card symbol) let's you observe ***all*** observable changes under a chosen object or array -- *at any depth*.\\n\\nYou can write paths such as `\\\"**\\\"`, `\\\"some.objectOrArray.**\\\"`, `\\\"some^objectOrArray.**\\\"`, or even `\\\"some.objectOrArray^**\\\"`.\\n\\nFor example, this:\\n\\n```js\\n$.observe(team, \\\"**\\\", myHandler);\\n```\\n\\nwill listen to ***all*** changes (to any depth) under the `team` object (for example, changes to the `team.manager`, `team.manager.address` or `team.manager.address.street` properties), and also changes to the `team.members` property (swapping to another array) -- and even to array changes to `team.members` (adding or removing a member...).\\n\\nAnd this:\\n\\n```js\\n$.observe(team, \\\"manager.address.**\\\", \\\"manager.members.**\\\", myHandler);\\n```\\n\\nwill listen to ***all*** changes (to any depth) under `manager.address`, and also to all array changes to the `manager.members` array, and to any changes to objects or arrays *under* the `manager.members` array.\\n\\nIncluding the '^' alongside the '**' allows you to specify *deep paths* along with *observeAll* behavior, such as:\\n\\n```js\\n\\\"manager.address^**\\\"\\n```\\n\\nwhich will listen to changing the `manager.address` to another `address` object, as well as to ***all*** changes (at any depth) *under* `manager.address`.\\n\\nSee [third sample](#observe@all-phones) below.\",\r\n        \"anchor\": \"all\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Two ways to 'observeAll': the ** wild card and the $.observeAll() API\",\r\n        \"text\": \"Internally, using `**` actually calls the [`observeAll()`](#observeAll) API.\\n\\nIn fact:\\n\\n```js\\n$.observe(team, \\\"**\\\", myHandler);\\n```\\nis actually equivalent to:\\n\\n```js\\n$.observable(team).observeAll(myHandler);\\n```\\n\\nThe first approach can be convenient for combining multiple paths (with or without `**`) using the same handler.\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observe(objectOrArray, ..., myHandler)\",\r\n        \"name\": \"observe\",\r\n        \"object\": \"$\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"objectOrArray\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"objectOrArray to be 'observed'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"path\",\r\n                \"type\": \"string\",\r\n                \"optional\": true,\r\n                \"description\": \"One or more paths specifying properties to be 'observed'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"...\",\r\n                \"type\": \"string\",\r\n                \"optional\": true,\r\n                \"description\": \"Additional paths\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": false,\r\n                \"description\": \"Event handler being registered (See <b>API: function myHandler</b> below for details)\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observe(person, \\\"address.street\\\", myHandler); \",\r\n            \"description\": \"Handle observable property or array change events\"\r\n          },\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"object\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"object to be 'observed'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"\\\"*\\\"\",\r\n                \"type\": \"string\",\r\n                \"optional\": false,\r\n                \"description\": \"wild card path - for <em>all</em> properties\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": false,\r\n                \"description\": \"Event handler being registered (See <b>API: function myHandler</b> below for details)\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observe(person, \\\"*\\\", myHandler); \",\r\n            \"description\": \"Handle all property change events on an object\"\r\n          },\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"array\",\r\n                \"type\": \"array\",\r\n                \"optional\": false,\r\n                \"description\": \"array to be 'observed'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": false,\r\n                \"description\": \"Event handler being registered (See <b>API: function myHandler</b> below for details)\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observe(phones, myHandler); \",\r\n            \"description\": \"Handle array change events on an array\"\r\n          }\r\n        ],\r\n        \"description\": \"Register a handler for observable changes on one or more objects or data paths\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"function myHandler(ev, eventArgs) { ... }\",\r\n        \"name\": \"myHandler\",\r\n        \"object\": \"\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"ev\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"jQuery event object, with properties which include: <ul class=\\\"textbefore\\\"><li><code>target</code>: the object which changed</li><li><code>data</code>: JsViews metadata, including: <code>fullPath</code> (the data-linking path such as \\\"address.street\\\")</li></ul>\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"eventArgs\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"JsViews event object for property or array changes, with properties <code>change</code> and additional properties specific to the 'change' type:<ul style='font-style:normal'><li>For <em>setProperty()</em>: <code>path</code>, <code>value</code> and <code>oldValue</code>. (With <code>change</code>=<em>\\\"set\\\"</em>)</li><li>For <em>insert()</em>: <code>index</code> and <code>items</code>. (With <code>change</code>=<em>\\\"insert\\\"</em>)</li><li>For <em>remove()</em>: <code>index</code> and <code>numToRemove</code>. (With <code>change</code>=<em>\\\"remove\\\"</em>)</li><li>For <em>move()</em>: <code>oldIndex</code>, <code>index</code> and <code>items</code>. (With <code>change</code>=<em>\\\"move\\\"</em>)</li><li>For <em>refresh()</em>, multiple events will be triggered:<ul><li>First, conversion from the current array items to the new refreshed set of items will be broken down into a sequence of <em>insert()</em>, <em>remove()</em> and <em>move()</em> operations, and each will trigger a corresponding event.<br/>The <code>eventArgs</code> object for each of these events will have an additional property: <code>refresh</code> = <em>true</em> (together with the usual <code>change</code>=<em>\\\"insert\\\"</em> / <em>\\\"remove\\\"</em> / <em>\\\"move\\\"</em> etc.)</li><li>Secondly, after those supplementary events, a <code>change</code>=<em>\\\"refresh\\\"</em> event will be triggered, which will also have an <code>oldItems</code> property</li></ul></li></ul>\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observe(person, \\\"address.street\\\", myHandler); \",\r\n            \"description\": \"Handler for observable property or array change events\"\r\n          }\r\n        ],\r\n        \"description\": \"An event handler for observable data changes &ndash; registered using <code>$.observe(...)</code> or <code>$.observable(object).observeAll(...)</code>\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"handler-api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Samples:\",\r\n        \"text\": \"Here is a sample showing `$.observe(person, \\\"name\\\", \\\"address^*\\\", changeHandler);`\",\r\n        \"anchor\": \"samples\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"Register a handler for changes: \",\r\n            \"text\": \"We handle changes in the `name`  and `address` properties of the `person`, and <em>any property</em> of the `address`:\\n\\n```js\\n$.observe(person, \\\"name\\\", \\\"address^*\\\", changeHandler);\\n```\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Define the handler:\",\r\n            \"code\": \"function changeHandler(ev, eventArgs) {\\n  var message = ... + eventArgs.path + ... + eventArgs.value ...;\\n  ...\\n}\"\r\n          },\r\n          {\r\n            \"_type\": \"template\",\r\n            \"title\": \"Template also binds to 'deep paths'\",\r\n            \"markup\": \"<input data-link=\\\"address^street\\\" />\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Modify values through template binding or buttons:\",\r\n            \"code\": \"$(\\\"#changeAddress\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\n    \\\"address\\\", \\n    {\\n      street: \\\"New Street\\\",\\n      ZIP: \\\"99999\\\"\\n    }\\n...\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\",\\n    ZIP: \\\"34009\\\"\\n  }\\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\",\\n    \\\"address.ZIP\\\": \\\"45008\\\"\\n  });\\n});\\n\\n$(\\\"#changeAddress\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\n    \\\"address\\\", \\n    {\\n      street: \\\"New Street\\\",\\n      ZIP: \\\"99999\\\"\\n    }\\n  );\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\n$.observe(person, \\\"name\\\", \\\"address^*\\\", changeHandler);\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The new <b>\\\" + eventArgs.path + \\\"</b> is <em>\\\"\\n    + $.views.converters.encode(JSON.stringify(eventArgs.value)) + \\\"</em>.\\\";\\n    // (Note that we encode < > and & as HTML entities, for display)\\n\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">Change leaf values</button>\\n  <button id=\\\"changeAddress\\\">New address</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Change Log:</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>Name:</td><td><input data-link=\\\"name\\\" /></td></tr>\\n    <tr><td>Street:</td><td><input data-link=\\\"address^street\\\" /></td></tr>\\n    <tr><td>ZIP:</td><td><input data-link=\\\"address^ZIP\\\" /></td></tr>\\n  </tbody></table>\\n</script>\",\r\n        \"height\": \"230\",\r\n        \"title\": \"Handling change events using $.observe()\",\r\n        \"anchor\": \"observe-sample1\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Now we modify the above sample to show `$.observe(person, ...)` also handling <em>array</em> properties: a `phones` property of `person`\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"Register a handler for changes: \",\r\n            \"text\": \"We handle changes in the `name`, `address` and `phones` properties of the `person`, and the `street` property of the `address`.\\n\\nBecause the `phones` property is itself an array, we also handle array changes on the `phones` array:\\n\\n```js\\n$.observe(person, \\\"name\\\", \\\"address^street\\\", \\\"phones\\\", changeHandler);\\n```\"\r\n          },\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"Define our handler:\",\r\n            \"text\": \"(Note that it outputs <em>all</em> the fields of `eventArgs`)\\n\\n```js\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"\\\";\\n  for (var key in eventArgs) {\\n    message += ... key ... eventArgs[key]...\\n  }\\n  ...\\n}\\n```\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  },\\n  phones: [{number: \\\"111 111 1111\\\"}, {number:\\\"222 222 2222\\\"}] \\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\"\\n  });\\n});\\n\\n$(\\\"#changeObjects\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    address: {street: \\\"New Street\\\"},\\n    phones: [{number:\\\"123 123 1234\\\"}]\\n  });\\n});\\n\\n$(\\\"#insert\\\").on(\\\"click\\\", function() {\\n  $.observable(person.phones).insert({\\n    number:\\\"456 456 4567\\\"\\n  });\\n});\\n\\n$(\\\"#result\\\").on(\\\"click\\\", \\\".remove\\\", function() {\\n  $.observable(person.phones).remove(\\n    $.view(this).index\\n  )\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\n$.observe(person, \\\"name\\\", \\\"address^street\\\", \\\"phones\\\", changeHandler);\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"\\\";\\n  for (var key in eventArgs) {\\n    message += \\\"<div><em>\\\" + key + \\\":</em> \\\"\\n     + $.views.converters.encode(JSON.stringify(eventArgs[key])) + \\\"</div>\\\";\\n     // (Note that we encode < > and & as HTML entities, for display)\\n  }\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">Change leaf values</button><br/>\\n  <button id=\\\"changeObjects\\\">New address and phones</button><br/>\\n  <button id=\\\"insert\\\">Add phone</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Change Log:</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>Name:</td><td><input data-link=\\\"name\\\" /></td></tr>\\n    <tr><td>Street:</td><td><input data-link=\\\"address^street\\\" /></td></tr>\\n    <tr><td>Phones:</td><td>\\n      <table class=\\\"nowidth\\\"><tbody>\\n        {^{for phones}}\\n          <tr><td>\\n            <input class=\\\"floatleft\\\" data-link=\\\"number\\\" />\\n            <span class=\\\"remove\\\"></span>\\n          </td></tr>\\n        {{/for}}\\n      </tbody></table>\\n    </td></tr>\\n  </tbody></table>\\n</script>\\n\",\r\n        \"height\": \"350\",\r\n        \"title\": \"Handling both property change and array change events, using $.observe()\",\r\n        \"anchor\": \"observe-prop-array\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"But notice that if you change the value of a phone number, our handler does not 'listen' to that change.\\n\\nIn the next sample we solve that by listening to *all* changes under `phones`, thanks to the [`**`](#observe@all) wild card.\\n\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"We modify the previous sample by replacing the `\\\"phones\\\"` path with `\\\"phones^**\\\"`:\\n\\n```js\\n$.observe(person, \\\"name\\\", \\\"address^street\\\", \\\"phones^**\\\", changeHandler);\\n```\\n\\nSo now we observe not only replacing the `phones` array and making *array changes* to the `phones` array -- but also *any* change ***under*** `phones`, such as changing a `phones[n].name` property.\\n\\n\\n\"\r\n          }\r\n        ],\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">Change leaf values</button><br/>\\n  <button id=\\\"changeObjects\\\">New address and phones</button><br/>\\n  <button id=\\\"insert\\\">Add phone</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Change Log:</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>Name:</td><td><input data-link=\\\"name\\\" /></td></tr>\\n    <tr><td>Street:</td><td><input data-link=\\\"address^street\\\" /></td></tr>\\n    <tr><td>Phones:</td><td>\\n      <table class=\\\"nowidth\\\"><tbody>\\n        {^{for phones}}\\n          <tr><td>\\n            <input class=\\\"floatleft\\\" data-link=\\\"number\\\" />\\n            <span class=\\\"remove\\\"></span>\\n          </td></tr>\\n        {{/for}}\\n      </tbody></table>\\n    </td></tr>\\n  </tbody></table>\\n</script>\",\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  },\\n  phones: [{number: \\\"111 111 1111\\\"}, {number:\\\"222 222 2222\\\"}] \\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\"\\n  });\\n  $.observable(person.phones[0]).setProperty({\\n    number: \\\"999 999 9999\\\"\\n  });\\n});\\n\\n$(\\\"#changeObjects\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    address: {street: \\\"New Street\\\"},\\n    phones: [{number:\\\"123 123 1234\\\"}]\\n  });\\n});\\n\\n$(\\\"#insert\\\").on(\\\"click\\\", function() {\\n  $.observable(person.phones).insert({\\n    number:\\\"456 456 4567\\\"\\n  });\\n});\\n\\n$(\\\"#result\\\").on(\\\"click\\\", \\\".remove\\\", function() {\\n  $.observable(person.phones).remove(\\n    $.view(this).index\\n  )\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\n$.observe(person, \\\"name\\\", \\\"address^street\\\", \\\"phones^**\\\", changeHandler);\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"\\\";\\n  for (var key in eventArgs) {\\n    message += \\\"<div><em>\\\" + key + \\\":</em> \\\"\\n     + $.views.converters.encode(JSON.stringify(eventArgs[key])) + \\\"</div>\\\";\\n     // (Note that we encode < > and & as HTML entities, for display)\\n\\n  }\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"anchor\": \"all-phones\",\r\n        \"height\": \"350\",\r\n        \"title\": \"Observing <b>all</b> changes under a path: $.observe() with **\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Note that instead of using the `**` wild card, we could have used the `observeAll()` API directly -- as shown in the [last sample](#observeAll@phones) of the [`observeAll()`](#observeAll) API topic.\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"$.observe() with computed observables\",\r\n        \"text\": \"Next, we'll modify the last sample to show only a [computed observable](#computed) `fullName(reverse)` depending on `firstName` and `lastName`.\\n\\nWe'll observe changes to `fullName()`:\\n\\n```js\\n$.observe(person, \\\"fullName\\\", changeHandler);\\n```\\n\\n(*Note:* The path for observing a computed observable has no parens -- so `\\\"fullName\\\"` rather than `\\\"fullName()\\\"`.)\",\r\n        \"anchor\": \"computed\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"Observe changes to `fullName()` computed observable:\\n\\n```js\\n$.observe(person, \\\"fullName\\\", changeHandler);\\n```\\n\\n-- which will trigger whenever `firstName` or `lastName` change, since `fullName()` has them as dependencies:\\n\\n```js\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"]; \\n```\"\r\n          }\r\n        ],\r\n        \"html\": \"<div class=\\\"left\\\" id=\\\"result\\\"></div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Change Log:</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>First name:</td><td><input data-link=\\\"firstName\\\" /></td></tr>\\n    <tr><td>Last name:</td><td><input data-link=\\\"lastName\\\" /></td></tr>\\n    <tr><td>Full name:</td><td><input data-link=\\\"fullName()\\\" /></td></tr>\\n    <tr><td>Full name<br/>(reversed)</td><td data-link=\\\"fullName(true)\\\"></td></tr>\\n  </tbody></table>\\n</script>\",\r\n        \"code\": \"var person = {\\n  firstName: \\\"Jeff\\\",\\n  lastName: \\\"Friedman\\\",\\n  fullName: fullName\\n};\\n\\n// Parameterized computed observable\\nfunction fullName(reversed) {\\n  // We will declare dependencies (below) for any values that\\n  // may change observably, and are not passed in as parameters\\n  return reversed\\n    ? this.lastName + \\\" \\\" + this.firstName\\n    : this.firstName + \\\" \\\" + this.lastName;\\n}\\n\\n// Declare dependencies, except for any values passed in as parameters\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"]; \\n\\n// For two-way binding of computed observables, provide a setter\\nfullName.set = function(val) {\\n  val = val.split(\\\" \\\");\\n  // Make observable change to dependent properties\\n  $.observable(this).setProperty({\\n    lastName: val.pop(),\\n    firstName: val.join(\\\" \\\")\\n  });\\n};\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\n// Observe changes to fullName() computed observable\\n$.observe(person, \\\"fullName\\\", changeHandler);\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The new <b>\\\" + eventArgs.path + \\\"</b> is <em>\\\"\\n    + $.views.converters.encode(JSON.stringify(eventArgs.value)) + \\\"</em>\\\";\\n    // (Note that we encode < > and & as HTML entities, for display)\\n\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"height\": \"250\",\r\n        \"title\": \"Observing a computed observable\",\r\n        \"anchor\": \"observe-computed\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"See also:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"observeAll\",\r\n            \"label\": \"observeAll()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"unobserve\",\r\n            \"label\": \"unobserve()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"namespaces\",\r\n            \"label\": \"Namespaces\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"unobserve\": {\r\n    \"title\": \"Removing 'observe' handlers: $.unobserve()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"A single call to <a href=\\\"#observe\\\">`$.observe(... myHandler)`</a> will attach the handler to one or more objects and arrays -- to listen to corresponding propertyChange or arrayChange events.\\n\\nThe same call (same parameters) but with `$.unobserve(...)` instead of `$.observe(...)` will remove the handler from each of those objects.\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.unobserve(objectOrArray, ..., myHandler)\",\r\n        \"name\": \"unobserve\",\r\n        \"object\": \"$\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"objectOrArray\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"objectOrArray to be 'unobserved'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"path\",\r\n                \"type\": \"string\",\r\n                \"optional\": true,\r\n                \"description\": \"One or more paths specifying properties to be 'unobserved'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"...\",\r\n                \"type\": \"string\",\r\n                \"optional\": true,\r\n                \"description\": \"Additional paths\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": true,\r\n                \"description\": \"Event handler that was registered\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.unobserve(person, \\\"address.street\\\", myHandler); \",\r\n            \"description\": \"Remove handler for observable  changes on specific paths\"\r\n          },\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"objectOrArray\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"objectOrArray to be 'observed'\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.unobserve(person); \",\r\n            \"description\": \"Remove all handlers for all observable changes to target object/array\"\r\n          },\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"objectOrArray\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"objectOrArray to be 'unobserved'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"path\",\r\n                \"type\": \"string\",\r\n                \"optional\": true,\r\n                \"description\": \"One or more paths specifying properties to be 'unobserved'\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"...\",\r\n                \"type\": \"string\",\r\n                \"optional\": true,\r\n                \"description\": \"Additional paths\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.unobserve(person, \\\"address.street\\\");\",\r\n            \"description\": \"Remove any handlers targeting specific properties or paths\"\r\n          },\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": false,\r\n                \"description\": \"Event handler that was registered\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.unobserve(myHandler);\",\r\n            \"description\": \"Remove handler from all objects/paths that it was observing\"\r\n          }\r\n        ],\r\n        \"description\": \"Unregister a handler for observable changes on one or more objects or data paths\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Samples:\",\r\n        \"text\": \"Here is a copy of a sample from the <a href=\\\"#observe\\\">`$.observe()`</a> topic, on which we have used `observe/unobserve` to provide an <em>enable/disable checkbox</em> on the <em>Change Log</em>:\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"```jsr\\n<input type=\\\"checkbox\\\" checked id=\\\"attach\\\"/>\\n```\\n\\n```js\\n$(\\\"#attach\\\").on(\\\"click\\\", function(x) {\\n  logChanges(this.checked);\\n});\\n```\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Call unobserve() with the same paths and handler, to stop 'listening'...\",\r\n            \"code\": \"function logChanges(enable) {\\n  if (enable) {\\n    $.observe(person, \\\"name\\\", \\\"address^*\\\", changeHandler);\\n  } else {\\n    $.unobserve(person, \\\"name\\\", \\\"address^*\\\", changeHandler);\\n  }\\n}\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\",\\n    ZIP: \\\"34009\\\"\\n  }\\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\",\\n    \\\"address.ZIP\\\": \\\"45008\\\"\\n  });\\n});\\n\\n$(\\\"#changeAddress\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\n    \\\"address\\\", \\n    {\\n      street: \\\"New Street\\\",\\n      ZIP: \\\"99999\\\"\\n    }\\n  );\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\n$(\\\"#attach\\\").on(\\\"click\\\", function(x) {\\n  logChanges(this.checked);\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\nlogChanges(true);\\n\\nfunction logChanges(enable) {\\n  if (enable) {\\n    $.observe(person, \\\"name\\\", \\\"address^*\\\", changeHandler);\\n  } else {\\n    $.unobserve(person, \\\"name\\\", \\\"address^*\\\", changeHandler);\\n  }\\n}\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"The new <b>\\\" + eventArgs.path + \\\"</b> is <em>\\\"\\n     + $.views.converters.encode(JSON.stringify(eventArgs.value)) + \\\"</em>.\\\";\\n     // (Note that we encode < > and & as HTML entities, for display)\\n\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">Change leaf values</button>\\n  <button id=\\\"changeAddress\\\">New address</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label><input type=\\\"checkbox\\\" checked id=\\\"attach\\\"/> Change Log</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>Name:</td><td><input data-link=\\\"name\\\" /></td></tr>\\n    <tr><td>Street:</td><td><input data-link=\\\"address^street\\\" /></td></tr>\\n    <tr><td>ZIP:</td><td><input data-link=\\\"address^ZIP\\\" /></td></tr>\\n  </tbody></table><br/>\\n\\n  {^{>name}}: {^{>address^street}} - {^{>address^ZIP}}\\n\\n</script>\",\r\n        \"height\": \"230\",\r\n        \"title\": \"Using $.unobserve() to remove handlers\",\r\n        \"anchor\": \"remove\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"$.unobserve() variants\",\r\n        \"text\": \"$.unobserve() calls do not have to include object, path or handler. Each can be omitted, and the effect will then be to remove 'observable change' handler bindings for ***all*** handlers, ***all*** paths or ***all*** objects...\\n\\n***Details:***\\n\\n*Removing all 'observe' handlers from all objects*\\n\\n```js\\n$.unobserve();\\n```\\n\\nThe above call will remove *all* 'observable change' handlers from all objects -- whether created by calls to `$.observe(...)` or `$.observable(...).observeAll()`, by JsViews data-link binding in templates or as top-level data-linking. For example, if you choose *Try it* in the sample above, and replace the `unobserve` call by `$.unobserve();` you'll see that unchecking has the effect of removing all JsViews data-link binding in the template too. \\n\\n`$.unobserve()` can be used on exiting JsViews or JsObservable code as a way of ensuring complete disposal of all handler bindings. (But note that JsViews data-linking in templates does already automatically dispose its own 'observe' bindings when the corresponding HTML elements are removed from the DOM.)\\n\\n*Removing all 'observe' handlers an object*\\n\\n```js\\n$.unobserve(objectOrArray);\\n```\\n\\nThe above call will remove *all* change handlers from the object (or array). For example, if you choose *Try it* in the sample above, and replace the `unobserve` call by `$.unobserve(person);` you'll see that unchecking has the effect of removing both the log listener and the JsViews data-link binding in the template too (for the `person` but not for the `address`).\\n\\n(Note that `$unobserve(objectA, objectB);` will do nothing. To unobserve multiple objects, make a separate `$unobserve(object);` call for each object.)\\n\\n*Removing 'observe' handler bindings for a given handler:*\\n\\n```js\\n$.unobserve(myHandler);\\n```\\n\\nThe above call will remove change handler bindings for `myHandler` from all objects. For example, you can choose *Try it* in the sample above, and replace the `unobserve` call by `$.unobserve(myHandler);`. You'll see that unchecking works correctly (and does not remove JsViews data-link binding in the template).\\n\\n*Removing bindings for specific paths, but for any handlers:*\\n\\n```js\\n$.unobserve(person, \\\"name\\\", \\\"address\\\"...);\\n```\\n\\nThe above call will remove all bindings of `person.name` and `person.address`, so choosing *Try it* and making that change will stop the `name` and `address` bindings for both template and message log, but both will continue to respond to changes in `address.ZIP` and `address.street`.\\n\\n*Removing 'observe' handlers from an object (or array), for a given handler*\\n\\n```js\\n$.unobserve(objectOrArray, myHandler);\\n```\\n\\nThe above call will remove bindings for `myHandler` from the object (or array) specified. For example, if you choose *Try it* in the sample above, and replace the `unobserve` call by `$.unobserve(person, myHandler);` you'll see that unchecking has the effect of removing logging for the person, but does not affect the data-link binding in the template.\\n\\n***Additional examples:***\\n\\n_unobserve using `\\\"*\\\"`_:\\n\\n```js\\n$.unobserve(person, \\\"*\\\", myHandler);\\n```\\n\\nThe above call will remove myHandler bindings for *all properties* of `person`, so is similar to `$.unobserve(person, myHandler)`. However, for array properties it will also remove the `arrayChange` `myHandler` binding (on `person.phones` for example).\\n\\n_unobserve using `\\\"**\\\"`_:\\n\\n```js\\n$.unobserve(person, \\\"**\\\", myHandler);\\n```\\n\\nThe above call will remove all `myHandler` bindings on `person` and on its child objects at any depth. So it is equivalent to `$.observable(person).unobserveAll(myHandler)`. (See *[unobserveAll](#unobserveAll)*.)\\n\\n*Array properties:*\\n\\n```js\\n$.unobserve(person, \\\"name\\\", person.phones, myHandler);\\n```\\n\\nThe above call will stop handing changes to `person.name`, and will stop listening to array change events on the `person.phones` array. You can test it by choosing *Try it* on the sample below, (based on the last sample in the [`$.observe()`](#observe\\\") topic):\\n\\nAnd this variant is almost the same:\\n\\n```js\\n$.unobserve(person, \\\"name\\\", \\\"phones\\\", myHandler);\\n```\\n\\n-- but in addition it will stop listening to *setting* the `phones` property of `person`\",\r\n        \"anchor\": \"variants\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Call unobserve with the same paths and handler, to stop 'listening'..\",\r\n            \"code\": \"function logChanges(enable) {\\n  if (enable) {\\n    $.observe(person, \\\"name\\\", \\\"address^street\\\", \\\"phones\\\", changeHandler);\\n  } else {\\n    $.unobserve(person, \\\"name\\\", \\\"address^street\\\", \\\"phones\\\", changeHandler);\\n  }\\n}\"\r\n          }\r\n        ],\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">Change leaf values</button><br/>\\n  <button id=\\\"changeObjects\\\">New address and phones</button><br/>\\n  <button id=\\\"insert\\\">Add phone</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Change Log:\\n  <input type=\\\"checkbox\\\" checked id=\\\"attach\\\"/></label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>Name:</td><td><input data-link=\\\"name\\\" /></td></tr>\\n    <tr><td>Street:</td><td><input data-link=\\\"address^street\\\" /></td></tr>\\n    <tr><td>Phones:</td><td>\\n      <table class=\\\"nowidth\\\"><tbody>\\n        {^{for phones}}\\n          <tr><td>\\n            <span class=\\\"floatleft\\\">{{:number}}</span>\\n            <span class=\\\"remove\\\"></span>\\n          </td></tr>\\n        {{/for}}\\n      </tbody></table>\\n    </td></tr>\\n  </tbody></table>\\n</script>\",\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  },\\n  phones: [{number: \\\"111 111 1111\\\"}, {number:\\\"222 222 2222\\\"}] \\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\"\\n  });\\n});\\n\\n$(\\\"#changeObjects\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    address: {street: \\\"New Street\\\"},\\n    phones: [{number:\\\"123 123 1234\\\"}]\\n  });\\n});\\n\\n$(\\\"#insert\\\").on(\\\"click\\\", function() {\\n  $.observable(person.phones).insert({\\n    number:\\\"456 456 4567\\\"\\n  });\\n});\\n\\n$(\\\"#result\\\").on(\\\"click\\\", \\\".remove\\\", function() {\\n  $.observable(person.phones).remove(\\n    $.view(this).index\\n  )\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\n$(\\\"#attach\\\").on(\\\"click\\\", function(x) {\\n  logChanges(this.checked);\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\nlogChanges(true);\\n\\nfunction logChanges(enable) {\\n  if (enable) {\\n    $.observe(person, \\\"name\\\", \\\"address^street\\\", \\\"phones\\\", changeHandler);\\n  } else {\\n    $.unobserve(person, \\\"name\\\", \\\"address^street\\\", \\\"phones\\\", changeHandler);\\n  }\\n}\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"\\\";\\n  for (var key in eventArgs) {\\n    message += \\\"<div><em>\\\" + key + \\\":</em> \\\"\\n      + $.views.converters.encode(JSON.stringify(eventArgs[key])) + \\\"</div>\\\";\\n      // (Note that we encode < > and & as HTML entities, for display)\\n  }\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"height\": \"350\",\r\n        \"title\": \"Modified sample showing also unobserve() for arrays:\",\r\n        \"anchor\": \"unobserve-array\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"See also:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"unobserveAll\",\r\n            \"label\": \"unobserveAll()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"observe\",\r\n            \"label\": \"observe()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"namespaces\",\r\n            \"label\": \"Namespaces\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"$observable\": {\r\n    \"title\": \"Making \\\"observable\\\" changes to objects and arrays\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"In current JavaScript implementations, modifying objects or arrays does not raise any event, so there is no way for the change to be detected elsewhere.\\n\\nJsViews dynamic data-bound UI solves this through <em>data-linking</em>, using the <em>JsObservable observer pattern</em>.\\n\\n`$.observable()` provides a way for you to change objects or arrays <em>observably</em>. Each change will raise a *[property change](#onpropchange)* or *[array change](#onarrchange)* event. \\n\\nJsViews uses those events to make any <a href=\\\"#linked-template-syntax\\\">data-linked tags or elements</a> in your templates update automatically in response to each change in your underlying data.\\n\\nIn addition, it ensures that those events are raised when the user interacts with a data-linked template, and causes changes to the underlying data.\\n\\nJsViews also lets you register <a href=\\\"#observeobjectsarrays\\\">event handlers or listeners</a>, so your code can listen to the observable changes made to your data objects or view models.\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"$.observable(myObject) and $.observable(myArray)\",\r\n        \"text\": \"If you pass an <em>object</em> to `$.observable()` then you obtain an <b><em>observable</em> object</b> (a very lightweight wrapper around your object), which provides a method for modifying object properties observably:\\n<ul class=\\\"textbefore\\\">\\n<li><a href=\\\"#setprop\\\">setProperty</a></li>\\n</ul>\\n\\nSimilarly, if you pass an <em>array</em> to `$.observable()` then you obtain an <b><em>observable</em> array</b> (a lightweight wrapper around your array) which provides a different set of methods, specific to modifying arrays: \\n<ul class=\\\"textbefore\\\">\\n<li><a href=\\\"#insert\\\">insert</a></li>\\n<li><a href=\\\"#remove\\\">remove</a></li>\\n<li><a href=\\\"#move\\\">move</a></li>\\n<li><a href=\\\"#refresh\\\">refresh</a></li>\\n</ul>\\n\\nNote that you don't need hold on to the <em>observable</em> wrapped object for reuse. It is so lightweight you can just call `$.observable(...)` again every time you need to make further changes to your object or array.\"\r\n      }\r\n    ]\r\n  },\r\n  \"observeAll\": {\r\n    \"title\": \"Observing all objects in an object hierarchy: $.observable().observeAll()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"The `.observeAll()` API allows you to register a single handler to listen to <b><em>all</em></b> the changes under a chosen object or array.\\n\\nThis means that no matter how complex the hierarchy of objects under the targeted object or array, and no matter how complex the structural changes made to that object hierarchy, the handler will continue to listen to any change on any object or array in the tree.\\n\\n```js\\n$.observable(myObjectOrArray).observeAll(myHandler)\\n```\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(objectOrArray).observeAll(myHandler)\",\r\n        \"name\": \"observeAll\",\r\n        \"object\": \"$.observable(objectOrArray)\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": false,\r\n                \"description\": \"Event handler being registered (See <b>API: function myHandler</b> below for details)\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(person).observeAll(myHandler);\",\r\n            \"description\": \"Observe all changes under an object or array\"\r\n          },\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": false,\r\n                \"description\": \"Event handler being registered (See <b>API: function myHandler</b> below for details)\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myFilter\",\r\n                \"type\": \"function\",\r\n                \"optional\": true,\r\n                \"description\": \"Filter function (See <b>API: function myFilter</b> below for details)\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(person).observeAll(myHandler, myFilter);\",\r\n            \"description\": \"Observe all changes under an object or array, subject to a filter test\"\r\n          }\r\n        ],\r\n        \"description\": \"Register an event handler to observe all changes in an object and on any nested object or array in the 'object graph'  under it\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"The `myHandler` function registered using the `.observeAll()` is identical to the handler used with [`$.observe()`](#observe) (though it provides an additional `ev.data.observeAll` helper object):\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"function myHandler(ev, eventArgs) { ... }\",\r\n        \"name\": \"myHandler\",\r\n        \"object\": \"\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"ev\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"jQuery event object, with properties which include: <ul class=\\\"textbefore\\\"><li><code>target</code>: the object which changed</li><li><code>data</code>: JsViews metadata, including: <ul><li><code>fullPath</code> (the data-linking path which will be \\\"*\\\", since this is <code>observeAll</code>)</li><li><code>observeAll</code> (a helper object with methods <code>path</code>, <code>parents</code> and <code>filter</code>, see below)</li></ul></li></ul>\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"eventArgs\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"JsViews event object for property or array changes, with properties <code>change</code> and additional properties specific to the 'change' type:<ul style='font-style:normal'><li>For <em>setProperty()</em>: <code>path</code>, <code>value</code> and <code>oldValue</code>. (With <code>change</code>=<em>\\\"set\\\"</em>)</li><li>For <em>insert()</em>: <code>index</code> and <code>items</code>. (With <code>change</code>=<em>\\\"insert\\\"</em>)</li><li>For <em>remove()</em>: <code>index</code> and <code>numToRemove</code>. (With <code>change</code>=<em>\\\"remove\\\"</em>)</li><li>For <em>move()</em>: <code>oldIndex</code>, <code>index</code> and <code>items</code>. (With <code>change</code>=<em>\\\"move\\\"</em>)</li><li>For <em>refresh()</em>, multiple events will be triggered:<ul><li>First, conversion from the current array items to the new refreshed set of items will be broken down into a sequence of <em>insert()</em>, <em>remove()</em> and <em>move()</em> operations, and each will trigger a corresponding event.<br/>The <code>eventArgs</code> object for each of these events will have an additional property: <code>refresh</code> = <em>true</em> (together with the usual <code>change</code>=<em>\\\"insert\\\"</em> / <em>\\\"remove\\\"</em> / <em>\\\"move\\\"</em> etc.)</li><li>Secondly, after those supplementary events, a <code>change</code>=<em>\\\"refresh\\\"</em> event will be triggered, which will also have an <code>oldItems</code> property</li></ul></li></ul>\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [\r\n              {\r\n                \"_type\": \"para\",\r\n                \"title\": \"\",\r\n                \"text\": \"The helper object `ev.data.observeAll` has utility methods:\\n\\n- `path()`: returns the path to the object that is changing, such as `\\\"root.phones[1]\\\"`\\n- `parents()`: returns an array with the stack of ancestor objects above the object that is changing\\n- `filter`: the filter method, if one was passed to the `observeAll()` call \"\r\n              }\r\n            ],\r\n            \"example\": \"$.observable(person).observeAll(myHandler);\\n\\nfunction myHandler(ev, eventArgs) {...}\",\r\n            \"description\": \"Handler for observable property or array change events\"\r\n          }\r\n        ],\r\n        \"description\": \"An event handler for observable data changes - registered using <code>$.observable(object).observeAll(myHandler)</code>\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api-handler\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample:\",\r\n        \"text\": \"We'll use the `observeAll()` API to provide an alternative version of our [last sample](#observe@all-phones) in the [`$.observe()`](#observe) topic.\\n\\nThis allows us to include listening to newly added items in the phone array. \\n\\n(But in this version we use `$observeAll()` directly, rather than using the `**` wild card as we did in that sample.)\",\r\n        \"anchor\": \"phones\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"A single observeAll() call for observing all the objects\",\r\n            \"text\": \"Even `phone` objects added to the `phones` array will automatically be 'listened' to by our handler, without us needing to write any additional code.\\n\\n```js\\n$.observable(person).observeAll(changeHandler);\\n```\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Define our handler:\",\r\n            \"code\": \"function changeHandler(ev, eventArgs) {\\n  var message = \\\"\\\";\\n  if (ev.data.observeAll) {\\n    message += \\\"<div><em>observeAll path:</em> \\\" + ev.data.observeAll.path() + \\\"</div>\\\"\\n  }\\n  for (var key in eventArgs) {\\n    message += ... key ... eventArgs[key]...\\n  }\\n  ...\\n}\"\r\n          }\r\n        ],\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  },\\n  phones: [{number: \\\"111 111 1111\\\"}, {number:\\\"222 222 2222\\\"}] \\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\"\\n  });\\n});\\n\\n$(\\\"#changeObjects\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    address: {street: \\\"New Street\\\"},\\n    phones: [{number:\\\"123 123 1234\\\"}]\\n  });\\n});\\n\\n$(\\\"#insert\\\").on(\\\"click\\\", function() {\\n  $.observable(person.phones).insert({\\n    number:\\\"456 456 4567\\\"\\n  });\\n});\\n\\n$(\\\"#result\\\").on(\\\"click\\\", \\\".remove\\\", function() {\\n  $.observable(person.phones).remove(\\n    $.view(this).index\\n  )\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\n$.observable(person).observeAll(changeHandler);\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"\\\";\\n  if (ev.data.observeAll) {\\n    message += \\\"<div><em>observeAll path:</em> \\\" + ev.data.observeAll.path() + \\\"</div>\\\"\\n  }\\n  for (var key in eventArgs) {\\n    message += \\\"<div><em>\\\" + key + \\\":</em> \\\"\\n      + $.views.converters.encode(JSON.stringify(eventArgs[key])) + \\\"</div>\\\";\\n      // (Note that we encode < > and & as HTML entities, for display)\\n  }\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">Change leaf values</button><br/>\\n  <button id=\\\"changeObjects\\\">New address and phones</button><br/>\\n  <button id=\\\"insert\\\">Add phone</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Change Log:</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>Name:</td><td><input data-link=\\\"name\\\" /></td></tr>\\n    <tr><td>Street:</td><td><input data-link=\\\"address^street\\\" /></td></tr>\\n    <tr><td>Phones:</td><td>\\n      <table class=\\\"nowidth\\\"><tbody>\\n        {^{for phones}}\\n          <tr><td>\\n            <input class=\\\"floatleft\\\" data-link=\\\"number\\\" />\\n            <span class=\\\"remove\\\" style=\\\"margin:3px\\\"></span>\\n          </td></tr>\\n        {{/for}}\\n      </tbody></table>\\n    </td></tr>\\n  </tbody></table>\\n</script>\",\r\n        \"height\": \"350\",\r\n        \"title\": \"Handling both property change and array change events, using .observeAll()\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Providing a filter method to observeAll\",\r\n        \"text\": \"Sometimes a scenario requires that `$.observable(rootObject).observeAll(handler)` calls the handler for a subset of the observable changes under the `rootObject`, rather than for every change.\\n\\nThis is achieved by passing a filter function as the second parameter of `observeAll()`:\\n\\n```js\\n$.observable(rootObject).observeAll(handler, function(path, object, parentObs) {\\n  return ... // Return true for events that should trigger the handler, false for the others...\\n});\\n```\",\r\n        \"anchor\": \"filter\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"function myFilter(path,  object, parentObs) { ... }\",\r\n        \"name\": \"myFilter\",\r\n        \"object\": \"\",\r\n        \"method\": true,\r\n        \"returns\": \"bool\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"path\",\r\n                \"type\": \"string\",\r\n                \"optional\": false,\r\n                \"description\": \"The path to the changing property or array\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"object\",\r\n                \"type\": \"object\",\r\n                \"optional\": false,\r\n                \"description\": \"The object or array which is changing\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"parentObs\",\r\n                \"type\": \"array\",\r\n                \"optional\": false,\r\n                \"description\": \"An array containing the chain of ancestor objects/arrays above the changing object\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(person).observeAll(myHandler, myFilter);\\n\\nfunction myFilter (path, object, parentObs) { ... }\",\r\n            \"description\": \"Filter method for observeAll() property or array change events\",\r\n            \"returns\": \"bool\"\r\n          }\r\n        ],\r\n        \"description\": \"A filter method for observable data changes - registered using <code>$.observable(object).observeAll(myHandler, myFilter)</code>\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api-filter\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"observeAll() with View Model object hierarchies\",\r\n        \"text\": \"The `observeAll()` API works equally well with View Model objects or plain objects. See *[JsViews: Data / View Model](#jsvmodel)*. At the end of that topic we show modified versions of our `observeAll()` sample above, [using](#jsvmodel@linkvmsample) 'hand-coded' View Model objects, or [using](#jsvmodel@compilevmsample) compiled View Model objects.\",\r\n        \"anchor\": \"vm\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"observeAll() and \\\"**\\\" paths\",\r\n        \"text\": \"As an alternative to using the `observeAll()` API, it is sometimes simpler to use the `**` ***all*** *wild card* path in association with `$.observe()`, or with computed observables, as shown [here](#observe@all) and [here](#computed@depends-all). \",\r\n        \"anchor\": \"all-wildcard\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"See also:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"unobserveAll\",\r\n            \"label\": \"unobserveAll()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"observe\",\r\n            \"label\": \"observe()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"namespaces\",\r\n            \"label\": \"Namespaces\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"unobserveAll\": {\r\n    \"title\": \"$.observable().unobserveAll()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Just as <a href=\\\"#observeAll\\\">`$.observable(objectOrArray).observeAll(myHandler)`</a> will traverse the whole hierarchy of objects or arrays under the root `objectOrArray` and attach the handler to each object, similarly `$.observable(objectOrArray).unobserveAll(myHandler)` will traverse the whole hierarchy and remove the handler from any object to which it has been attached.\"\r\n      },\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(objectOrArray).unobserveAll(myHandler)\",\r\n        \"name\": \"unobserveAll\",\r\n        \"object\": \"$.observable(obOrArray)\",\r\n        \"method\": true,\r\n        \"returns\": \"\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myHandler\",\r\n                \"type\": \"function\",\r\n                \"optional\": true,\r\n                \"description\": \"Event handler that was registered\"\r\n              },\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"myFilter\",\r\n                \"type\": \"function\",\r\n                \"optional\": true,\r\n                \"description\": \"Filter function\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(person).unobserveAll(myHandler); \",\r\n            \"description\": \"Remove handler from object/array and from all nested objects\"\r\n          },\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(person).unobserveAll(); \",\r\n            \"description\": \"Remove <b>all</b> handlers for observable changes, from  an object/array and from all nested objects\"\r\n          }\r\n        ],\r\n        \"description\": \"Remove a handler for observable changes, from an object or array, and from any nested objects or arrays under it\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Samples:\",\r\n        \"text\": \"Here is a copy of a sample from the <a href=\\\"#observeAll\\\">`.observeAll()`</a> topic, on which we have used `observeAll`/`unobserveAll` to provide an <em>enable/disable checkbox</em> on the <em>Change Log</em>:\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"```jsr\\n<input type=\\\"checkbox\\\" checked id=\\\"attach\\\"/>\\n```\\n\\n```js\\n$(\\\"#attach\\\").on(\\\"click\\\", function(x) {\\n  logChanges(this.checked);\\n});\\n```\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Call unobserveAll() on the root, to stop 'listening'...\",\r\n            \"code\": \"function logChanges(enable) {\\n  if (enable) {\\n    $.observable(person).observeAll(changeHandler);\\n  } else {\\n    $.observable(person).unobserveAll(changeHandler);\\n  }\\n}\"\r\n          }\r\n        ],\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"modify\\\">Change leaf values</button><br/>\\n  <button id=\\\"changeObjects\\\">New address and phones</button><br/>\\n  <button id=\\\"insert\\\">Add phone</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label><input type=\\\"checkbox\\\" checked id=\\\"attach\\\"/> Change Log</label>\\n  <button class=\\\"clear\\\">Clear</button>\\n  <div class=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <table class=\\\"nowidth\\\"><tbody>\\n    <tr><td>Name:</td><td><input data-link=\\\"name\\\" /></td></tr>\\n    <tr><td>Street:</td><td><input data-link=\\\"address^street\\\" /></td></tr>\\n    <tr><td>Phones:</td><td>\\n      <table class=\\\"nowidth\\\"><tbody>\\n        {^{for phones}}\\n          <tr><td>\\n            <input class=\\\"floatleft\\\" data-link=\\\"number\\\" />\\n            <span class=\\\"remove\\\"></span>\\n          </td></tr>\\n        {{/for}}\\n      </tbody></table>\\n    </td></tr>\\n  </tbody></table>\\n</script>\",\r\n        \"code\": \"var person = {\\n  name: \\\"Pete\\\",\\n  address: {\\n    street: \\\"1st Ave\\\"\\n  },\\n  phones: [{number: \\\"111 111 1111\\\"}, {number:\\\"222 222 2222\\\"}] \\n};\\n\\n$(\\\"#modify\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    name: \\\"Hermione\\\",\\n    \\\"address.street\\\": \\\"Main St\\\"\\n  });\\n});\\n\\n$(\\\"#changeObjects\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty({\\n    address: {street: \\\"New Street\\\"},\\n    phones: [{number:\\\"123 123 1234\\\"}]\\n  });\\n});\\n\\n$(\\\"#insert\\\").on(\\\"click\\\", function() {\\n  $.observable(person.phones).insert({\\n    number:\\\"456 456 4567\\\"\\n  });\\n});\\n\\n$(\\\"#result\\\").on(\\\"click\\\", \\\".remove\\\", function() {\\n  $.observable(person.phones).remove(\\n    $.view(this).index\\n  )\\n});\\n\\n$(\\\".clear\\\").on(\\\"click\\\", function() {\\n  $(\\\".messages\\\").empty();\\n});\\n\\n$(\\\"#attach\\\").on(\\\"click\\\", function(x) {\\n  logChanges(this.checked);\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\nlogChanges(true);\\n\\nfunction logChanges(enable) {\\n  if (enable) {\\n    $.observable(person).observeAll(changeHandler);\\n  } else {\\n    $.observable(person).unobserveAll(changeHandler);\\n  }\\n}\\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = \\\"\\\";\\n  if (ev.data.observeAll) {\\n    message += \\\"<div><em>observeAll path:</em> \\\" + ev.data.observeAll.path() + \\\"</div>\\\"\\n  }\\n  for (var key in eventArgs) {\\n    message += \\\"<div><em>\\\" + key + \\\":</em> \\\"\\n      + $.views.converters.encode(JSON.stringify(eventArgs[key])) + \\\"</div>\\\";\\n      // (Note that we encode < > and & as HTML entities, for display)\\n  }\\n  $(\\\".messages\\\").append(\\\"<div>\\\" + message + \\\"</div>\\\");\\n}\",\r\n        \"height\": \"350\",\r\n        \"title\": \"unobserveAll()\",\r\n        \"anchor\": \"sample\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"$.unobserveAll() variant\",\r\n        \"text\": \"<em>Omitting the handler:</em>\\n\\n```js\\n$.observable(objectOrArray).unobserveAll()\\n```\\n\\nThe above call will remove <em>all</em> change handlers from the object, and any nested objects.\\n\\nTo test it, you can choose <em>Try it</em> in the sample above, and replace the `unobserveAll` call by `$.observable(person).unobserveAll();`\\n\\nYou'll see that unchecking will then have the effect of removing not only the logging handler, but also the JsViews data-link binding handler used in the template. Now, changes will trigger neither log messages, nor template updates.\",\r\n        \"anchor\": \"all-handlers\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"unobserveAll() with View Model object hierarchies\",\r\n        \"text\": \"The `unobserveAll()` API works equally well with View Model objects or plain objects. See *[JsViews: Data / View Model](#jsvmodel)*. At the end of that topic we show modified versions of our `unobserveAll()` sample above, [using](#jsvmodel@linkvmsample) 'hand-coded' View Model objects, or [using](#jsvmodel@compilevmsample) compiled View Model objects.\",\r\n        \"anchor\": \"vm\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"See also:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"observeAll\",\r\n            \"label\": \"observeAll()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"unobserve\",\r\n            \"label\": \"unobserve()\"\r\n          },\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"namespaces\",\r\n            \"label\": \"Namespaces\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"computed\": {\r\n    \"title\": \"Computed properties and computed observables\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"JsRender templates can include [computed properties](#paths@computed), such as:\\n\\n- `person.firstName()`: a computed 'getter' property which returns a private `_firstName`\\n- `person.fullName()`: a computed property which concatenates (and perhaps formats) first and last name.\\n- `expenses.total()`: a computed property which gives the total for a property/column of an array of items.\\n\\nSee the samples *[Getter properties with plain objects](#paths@getter-plain-sample)* and *[Getter properties on View Model](#paths@getter-vm-sample)*.\\n\\nJsObservable and JsViews provide support for making computed properties ***observable***, so that in a data-linked template you can bind directly to computed properties, provide two-way data-binding, etc.\\n\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Computed observable: get / set\",\r\n        \"text\": \"To make `person.firstName()` into a ***computed observable***, with two-way data-binding, specify an associated 'setter' function:\\n\\n```js\\nfunction firstName() {\\n  return this._firstName; // Get the firstName\\n}\\n\\nfirstName.set = function(val) {\\n  this._firstName = val; // Set the firstName\\n}\\n```\\n\\nThe `firstName()` *computed observable* can be modified observably, either by calling `setProperty`:\\n\\n```js\\n$.observable(person).setProperty(\\\"firstName\\\", \\\"updatedFirstName\\\");\\n``` \\n\\nor by two-way binding in a template:\\n\\n```jsr\\n<input data-link=\\\"firstName()\\\" />\\n```\\n\\nand if used in a tag expression in a data-linked templates it will update automatically in response to observable changes: \\n\\n```jsr\\nFirst name: {^{>firstName()}}\\n\\n<span data-link=\\\"firstName()\\\"></span>\\n```\\n\\n`$.observe()` can be used to listen to observable changes in a computed observable:\\n\\nThe following sample shows all of these scenarios:\",\r\n        \"anchor\": \"getset\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"*Code:*\\n\\n```js\\nfunction firstName() { return this._firstName; } // Getter (with _firstName as private property)\\n\\nfirstName.set = function(val) { this._firstName = val; }; // Provide a setter\\n\\n$.observable(person).setProperty(\\\"firstName\\\", person.firstName() + \\\"+\\\"); // Modify firstName() observably\\n\\n$.observe(data.person, \\\"firstName\\\", function(ev, evArgs) {\\n  ... // Listen to observable changes in firstName()\\n});\\n```\\n\\n*Template:*\\n\\n```jsr\\n<input data-link=\\\"person.firstName()\\\" />\\n{^{>person.firstName()}}\\n<em data-link=\\\"person.firstName()\\\"></em>\\n```\\n\"\r\n          }\r\n        ],\r\n        \"code\": \"function firstName() {\\n  return this._firstName;\\n}\\n\\nfirstName.set = function(val) {\\n  this._firstName = val;\\n};\\n\\nvar data = {\\n  person: {\\n    _firstName: \\\"Jo\\\",\\n    firstName: firstName\\n  }\\n};\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", data, {\\n  changeFirstName: function(person) {\\n    $.observable(person).setProperty(\\n      \\\"firstName\\\",\\n      person.firstName() + \\\"+\\\"\\n    );\\n  }\\n});\\n\\n$.observe(data.person, \\\"firstName\\\", function(ev, evArgs) {\\n  alert(\\\"New firstName: \\\" + evArgs.value);\\n});\",\r\n        \"html\": \"<div id=\\\"result\\\"></div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <button data-link=\\\"{on ~changeFirstName person}\\\">\\n    Change firstName\\n  </button> <br/>\\n\\n  First name: <input data-link=\\\"person.firstName()\\\" /> -\\n  {^{>person.firstName()}} -\\n  <em data-link=\\\"person.firstName()\\\"></em>\\n</script>\",\r\n        \"height\": \"70\",\r\n        \"title\": \"get/set\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Note that when data-linking computed observables to multiple targets, the full data-linking syntax is used. The following example shows two-way data-linking to `name()` and data-linking of the placeholder target to `namePlaceholder()`):\\n\\n```jsr\\n<input data-link=\\\"{:name():} placeholder{:namePlaceholder()}\\\" />\\n```\\n\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Get/set properties on a View Model\",\r\n        \"text\": \"Rather than using plain JavaScript objects with getter functions, as above, a more common pattern (providing better encapsulation) would be to define a *'View Model'* class, and to instantiate that class to provide data instances.\\n\\nSee *[JsRender: Data / View Model](#jsrmodel)* and *[JsViews: Data / View Model](#jsvmodel)* for full discussion of using View Models with JsRender and JsViews.\\n\\nHere is a modified version of the above sample, using a View Model `Person` class, rather than plain objects:\",\r\n        \"anchor\": \"vm\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"*Code:*\\n\\n```js\\nfunction firstName() { return this._firstName; } // Getter (with _firstName as private property)\\n\\nfirstName.set = function(val) { this._firstName = val; }; // Provide a setter\\n\\n// Person class\\nfunction Person(firstName) {\\n  this._firstName = firstName;\\n}\\n\\nPerson.prototype = {\\n  firstName: firstName\\n};\\n\\nvar data = {\\n  person: new Person(\\\"Jo\\\")\\n};\\n```\\n\\n*Template:*\\n\\n```jsr\\n<input data-link=\\\"person.firstName()\\\" />\\n{^{>person.firstName()}}\\n<em data-link=\\\"person.firstName()\\\"></em>\\n```\\n\"\r\n          }\r\n        ],\r\n        \"height\": \"70\",\r\n        \"html\": \"<div id=\\\"result\\\"></div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <button data-link=\\\"{on ~changeFirstName person}\\\">\\n    Change firstName\\n  </button> <br/>\\n\\n  First name: <input data-link=\\\"person.firstName()\\\" /> -\\n  {^{>person.firstName()}} -\\n  <em data-link=\\\"person.firstName()\\\"></em>\\n</script>\",\r\n        \"code\": \"function firstName() {\\n    return this._firstName;\\n}\\n\\nfirstName.set = function(val) {\\n  this._firstName = val;\\n};\\n\\n// Person class\\nfunction Person(firstName) {\\n  this._firstName = firstName;\\n}\\n\\nPerson.prototype = {\\n  firstName: firstName\\n};\\n\\nvar data = {\\n  person: new Person(\\\"Jo\\\")\\n};\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", data, {\\n  changeFirstName: function(person) {\\n    $.observable(person).setProperty(\\n      \\\"firstName\\\",\\n      person.firstName() + \\\"+\\\"\\n    );\\n  }\\n});\\n\\n$.observe(data.person, \\\"firstName\\\", function(ev, evArgs) {\\n  alert(\\\"New firstName: \\\" + evArgs.value);\\n});\",\r\n        \"title\": \"get/set &ndash; View Model\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Computed observable: get &ndash; depends\",\r\n        \"text\": \"The `firstName()` example above is probably the most common type of *computed observable*: a get/set property depending on a corresponding 'private' property.\\n\\nAnother very common use of *computed observables* is for read-only computed properties that may depend on more than one other property.\\n\\nThe  following sample illustrates that, with a `person.fullName()` computed property which concatenates the computed `firstName()` and a regular (non-computed) `lastName` property.\\n\\nThis type of computed observable consists simply of a getter function, and a specification of the dependencies -- i.e. the other observable properties which the getter function depends on:\\n\\n```js\\nfunction fullName() { return this.firstName() + \\\" \\\" + this.lastName; }\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"];\\n```\\n\\nThe `depends` specification above means that whenever `firstName()` or `lastName` change, an observable change event for `fullName()` will also be triggered, and `fullName()` will be recalculated. \\n\",\r\n        \"anchor\": \"getdepends\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"*Code:*\\n\\n```js\\nfunction fullName() { return this.firstName() + \\\" \\\" + this.lastName; } // getter\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"]; // Dependencies\\n\\n$.observe(data.person, \\\"fullName\\\", function(ev, evArgs) {\\n  ... // listen to changes in fullName()\\n});\\n```\\n\\n*Template:*\\n\\n```jsr\\n{^{>person.fullName()}}\\n<em data-link=\\\"person.fullName()\\\"></em>\\n```\"\r\n          }\r\n        ],\r\n        \"code\": \"function firstName() { return this._firstName; }\\n\\nfirstName.set = function(val) {\\n  this._firstName = val;\\n};\\n\\nfunction fullName() { return this.firstName() + \\\" \\\" + this.lastName; }\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"];\\n\\nvar data = {\\n  person: {\\n    _firstName: \\\"Jo\\\",\\n    lastName: \\\"Blow\\\",\\n    firstName: firstName,\\n    fullName: fullName\\n  }\\n};\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", data);\\n\\n$.observe(data.person, \\\"fullName\\\", function(ev, evArgs) {\\n  alert('New fullName: \\\"' + data.person.fullName() + '\\\"');\\n});\\n\",\r\n        \"html\": \"<div id=\\\"result\\\"></div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  First name: <input data-link=\\\"person.firstName()\\\" /> -\\n  {^{>person.firstName()}} -\\n  <em data-link=\\\"person.firstName()\\\"></em> <br/>\\n\\n  Last name: <input data-link=\\\"person.lastName\\\" /> -\\n  {^{>person.lastName}} -\\n  <em data-link=\\\"person.lastName\\\"></em> <br/>\\n\\n  Full name: {^{>person.fullName()}} -\\n  <em data-link=\\\"person.fullName()\\\"></em>\\n</script>\",\r\n        \"height\": \"90\",\r\n        \"title\": \"get &ndash; depends\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Computed observable: get / set &ndash; depends\",\r\n        \"text\": \"Sometimes a computed observable may depend on other observables, and also have a setter defined.\\n\\nFor example we may want to allow two-way binding to `fullName()` -- with a setter which looks for white-space in the provided string and reassigns the preceding and following text to `firstName` and `lastName` -- so an observable change to fullName automatically triggers appropriate observable changes to `firstName` and `lastName`:\",\r\n        \"anchor\": \"getsetdepends\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"*Code:*\\n\\n```js\\nfunction fullName() { return this.firstName() + \\\" \\\" + this.lastName; }\\n\\nfullName.set = function(val) { \\n  val = val.split(\\\" \\\");\\n  // Make observable change to dependent properties\\n  $.observable(this).setProperty({\\n    lastName: val.pop(),\\n    firstName: val.join(\\\" \\\")\\n  });\\n};\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"];\\n```\\n\\n*Template:*\\n\\n```jsr\\n<input data-link=\\\"person.fullName()\\\" />\\n{^{>person.fullName()}}\\n<em data-link=\\\"person.fullName()\\\" ></em>\\n```\"\r\n          }\r\n        ],\r\n        \"code\": \"function firstName() { return this._firstName; }\\n\\nfirstName.set = function(val) {\\n  this._firstName = val;\\n};\\n\\nfunction fullName() { return this.firstName() + \\\" \\\" + this.lastName; }\\n\\nfullName.set = function(val) {\\n  val = val.split(\\\" \\\");\\n  // Make observable change to dependent properties\\n  $.observable(this).setProperty({\\n    lastName: val.pop(),\\n    firstName: val.join(\\\" \\\")\\n  });\\n};\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"];\\n\\nvar data = {\\n  person: {\\n    _firstName: \\\"Jo\\\",\\n    lastName: \\\"Blow\\\",\\n    firstName: firstName,\\n    fullName: fullName\\n  }\\n};\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", data);\",\r\n        \"html\": \"<div id=\\\"result\\\"></div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  First name: <input data-link=\\\"person.firstName()\\\" /> -\\n  {^{>person.firstName()}} -\\n  <em data-link=\\\"person.firstName()\\\"></em> <br/>\\n\\n  Last name: <input data-link=\\\"person.lastName\\\" /> -\\n  {^{>person.lastName}} -\\n  <em data-link=\\\"person.lastName\\\"></em> <br/>\\n\\n  Full name: <input data-link=\\\"person.fullName()\\\" /> -\\n  {^{>person.fullName()}} -\\n  <em data-link=\\\"person.fullName()\\\"></em>\\n</script>\",\r\n        \"height\": \"100\",\r\n        \"title\": \"get/set &ndash; depends\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Computed observable with parameters\",\r\n        \"text\": \"A computed observable function `myComputed(a, b, c)` may take parameters. For example:\\n\\n```js\\nfunction fullName(reverse) {\\n return reverse\\n   ? this.lastName() + \\\" \\\" + this.firstName\\n   : this.firstName + \\\" \\\" + this.lastName();\\n}\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"];\\n```\\n\\nThe computed value might be used in a data-linked expression in a template, with a specific value passed in as parameter:\\n\\n```jsr\\n{^{>person.fullName(true)}}\\n```\\n\\n(You can see an example of this in the [samples/computed/fullName](#samples/computed/fullname) samples.)\\n\\nPassed-in parameters may be observable values -- in which case whenever they change observably, the computed observable will update automatically. For example:\\n \\n```jsr\\n{^{>person.fullName(~settings.reverseName)}}\\n```\\n\\nThe value of a computed observable (`person.fullName(...)` above) will update whenever either an observable parameter (in this case: `~setting.reverseName`) or a dependency (`firstName` or `lastName`) change.\\n\\nHere is a working example:\",\r\n        \"anchor\": \"params\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"*Code:*\\n\\n```js\\nfunction fullName(reverse) {\\n  return reverse\\n    ? this.lastName + \\\" \\\" + this.firstName()\\n    : this.firstName() + \\\" \\\" + this.lastName;\\n}\\n```\\n\\n*Template:*\\n\\n```jsr\\n{^{>person.fullName(~settings.reverseName)}}\\n\\n<em data-link=\\\"person.fullName(~settings.reverseName)\\\" ></em>\\n```\"\r\n          }\r\n        ],\r\n        \"html\": \"<div id=\\\"result\\\"></div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <label><input type=\\\"checkbox\\\" data-link=\\\"~settings.reverseName\\\" /> Reverse name:</label>\\n  {^{:~settings.reverseName}} <br/>\\n\\n  First name: <input data-link=\\\"person.firstName()\\\" /> -\\n  {^{>person.firstName()}} -\\n  <em data-link=\\\"person.firstName()\\\"></em> <br/>\\n\\n  Last name: <input data-link=\\\"person.lastName\\\" /> -\\n  {^{>person.lastName}} -\\n  <em data-link=\\\"person.lastName\\\"></em> <br/>\\n\\n  Full name: <input data-link=\\\"person.fullName()\\\" /> -\\n  {^{>person.fullName(~settings.reverseName)}} -\\n  <em data-link=\\\"person.fullName(~settings.reverseName)\\\"></em>\\n</script>\",\r\n        \"code\": \"function firstName() { return this._firstName; }\\n\\nfirstName.set = function(val) {\\n  this._firstName = val;\\n};\\n\\nfunction fullName(reverse) {\\n  return reverse\\n    ? this.lastName + \\\" \\\" + this.firstName()\\n    : this.firstName() + \\\" \\\" + this.lastName;\\n}\\n\\nfullName.set = function(val) {\\n  val = val.split(\\\" \\\");\\n  // Make observable change to dependent properties\\n  $.observable(this).setProperty({\\n    lastName: val.pop(),\\n    firstName: val.join(\\\" \\\")\\n  });\\n};\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\"];\\n\\nvar data = {\\n  person: {\\n    _firstName: \\\"Jo\\\",\\n    lastName: \\\"Blow\\\",\\n    firstName: firstName,\\n    fullName: fullName\\n  }\\n};\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", data, {\\n  settings: {reverseName: false}\\n});\",\r\n        \"height\": \"110\",\r\n        \"title\": \"get/set &ndash; depends, with parameters\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"The computed `fullName(reverse)` above takes a parameter, `reverse`, but note that for read-write computed properties (*get/set*), you cannot pass additional parameters to the setter. (So in the example above is the setter is still `fullName.set = function(val) {...}`.) Indeed, clicking on the *Reverse name* checkbox does not reverse the name in the *Full name* textbox.\\n\\nTo achieve that functionality, we need to include `\\\"~settings.reverseName\\\"` as a path in the `fullName.depends` declaration, rather than passing it in as a parameter:\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"```js\\nfunction fullName() {\\n  return settings.reverseName ? ... : ...;\\n}\\n\\nfullName.set = function(val) {\\n  ...\\n  $.observable(this).setProperty({\\n    lastName: settings.reverseName ? ... : ...,\\n    firstName: settings.reverseName ? ... : ...\\n  });\\n};\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\", \\\"~settings.reverseName\\\" ];\\n\\nvar settings = {reverseName: false};\\n\\ntmpl.link(\\\"#result\\\", data, {settings: settings});\\n```\"\r\n          }\r\n        ],\r\n        \"html\": \"<div id=\\\"result\\\"></div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <label><input type=\\\"checkbox\\\" data-link=\\\"~settings.reverseName\\\" /> Reverse name:</label>\\n  {^{:~settings.reverseName}} <br/>\\n\\n  First name: <input data-link=\\\"person.firstName()\\\" /> -\\n  {^{>person.firstName()}} -\\n  <em data-link=\\\"person.firstName()\\\"></em> <br/>\\n\\n  Last name: <input data-link=\\\"person.lastName\\\" /> -\\n  {^{>person.lastName}} -\\n  <em data-link=\\\"person.lastName\\\"></em> <br/>\\n\\n  Full name: <input data-link=\\\"person.fullName()\\\" /> -\\n  {^{>person.fullName()}} -\\n  <em data-link=\\\"person.fullName()\\\"></em>\\n</script>\",\r\n        \"code\": \"function firstName() { return this._firstName; }\\n\\nfirstName.set = function(val) {\\n  this._firstName = val;\\n};\\n\\nfunction fullName() {\\n  return settings.reverseName\\n    ? this.lastName + \\\" \\\" + this.firstName()\\n    : this.firstName() + \\\" \\\" + this.lastName;\\n}\\n\\nfullName.set = function(val) {\\n  val = val.split(\\\" \\\");\\n  var afterSpace = val.pop();\\n  var beforeSpace = val.join(\\\" \\\");\\n  // Make observable change to dependent properties\\n  $.observable(this).setProperty({\\n    lastName: settings.reverseName ? beforeSpace : afterSpace,\\n    firstName: settings.reverseName ? afterSpace : beforeSpace\\n  });\\n};\\n\\nfullName.depends = [\\\"firstName\\\", \\\"lastName\\\", \\\"~settings.reverseName\\\" ];\\n\\nvar settings = {\\n reverseName: false\\n};\\n\\nvar data = {\\n  person: {\\n    _firstName: \\\"Jo\\\",\\n    lastName: \\\"Blow\\\",\\n    firstName: firstName,\\n    fullName: fullName\\n  }\\n};\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", data, {\\n  settings: settings\\n});\",\r\n        \"title\": \"get/set &ndash; depends (with ~settings.reverseName in depends)\",\r\n        \"height\": \"110\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Declaring dependencies for a computed observable\",\r\n        \"text\": \"When setting\\n\\n```js\\nmyObservableFunction.depends = dependencyExpression;\\n```\\n\\nfor a computed observable, the `dependencyExpression` can be a string, such as:\\n- `\\\"firstName\\\"`, or<br/>\\n- `\\\"manager^address*\\\"`\\n\\nor an array of strings (or objects and strings), such as:\\n- `[\\\"firstName\\\", \\\"lastName\\\", \\\"~settings.reverseName\\\"]` or<br/>\\n- `[\\\"firstName\\\", \\\"lastName\\\", settings, \\\"reverseName\\\"]`\\n\\n(The last two are equivalent, assuming the `settings` object is the helper object referenced declaratively using `\\\"~settings\\\"`.)\\n\\nIn fact setting `depends` to an array is equivalent to providing the corresponding arguments to `$.observe()`. So all the examples of [$.observe()](#observe@paths) (including with [deep paths](#observe@deep)) can also be used in equivalent `depends` expressions. For example you might have:\\n\\n```js\\nmyObservableFn.depends = [person1, \\\"lastName\\\", \\\"address^*\\\", person2, \\\"firstName\\\", person3, \\\"*\\\", \\\"address.*\\\"];\\n```\\n\\n-- which is similar to the example #6 in the [$.observe() examples](#observe@paths) -- and includes a deep path `\\\"address^*\\\"` (listening to changes in the `address` property of the `person1` object and changes to any properties of the `person1.address` object).\\n\\nIn addition, `depends` expressions can be functions. \\n\\nA *depends* function can return strings or arrays. It is called during initial binding of the link expression, and the `this` pointer (and `data` argument) is the object instance (e.g. `person` object in the case of a computed `person.fullName()`):\\n\\n```js\\nmyObservableFn.depends = function(data) {\\n  return [data.person1, \\\"lastName\\\", \\\"address.*\\\", data.person2, \\\"firstName\\\"];\\n}\\n```\\n\\n-- and/or can use a callback:\\n\\n```js\\nmyObservableFn.depends = function(data, callback) {\\n  $.observable(data.person).observeAll(callback);\\n  // (In addition to calling the callback, can optionally also return a string or array)\\n}\\n```\\n\\nNote that this last example, (using `observeAll` to call the callback) is a *programmatic* approach which is actually equivalent to the following *declarative* version with the `**` wild card:\\n```js\\nmyObservableFn.depends = \\\"person.**\\\";\\n```\\n\\n(See the [next sample](#computed@depends-all))\\n\\n\",\r\n        \"anchor\": \"depends\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Sample: Using the <b>**</b> wild card in <b>depends</b>\",\r\n        \"text\": \"In the next sample we'll use the `**` wild card in a `depends` declaration for a computed observable that tracks the running total of some items in a shopping cart.\\n\\nThis sample also illustrates [top-level data-linking](#jsv.toplink-true), and declarative events.\\n\\n(For more information see the same sample here: [samples/computed/shopping-cart](#samples/computed/shopping-cart))\",\r\n        \"anchor\": \"depends-all\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"\",\r\n            \"text\": \"Here we define a `totalAmount()` computed observable for calculating the total amount for an array of `items` in a shopping cart.\\n\\n```js\\nfunction totalAmount() {\\n  ...\\n  while (...) {\\n    amount += this.items[l].price * this.items[l].quantity;\\n  }\\n  return amount;\\n}\\n\\nvar cart = {\\n  total: totalAmount,\\n  ...\\n  items: [...]\\n}\\n```\\n\\nThe total is rendered using:\\n\\n```jsr\\n<span colspan=\\\"2\\\" data-link=\\\"total()\\\"></span>\\n```\\n\\n(In this example we are using [top-level data-linking](#top).)\\n\"\r\n          },\r\n          {\r\n            \"_type\": \"para\",\r\n            \"title\": \"<b>depends</b> with <b>**</b>\",\r\n            \"text\": \"`totalAmount()` needs to update when the `items` array changes, and also when the `quantity` or `price` property of an `item` in the array changes.\\n\\nWe can achieve that very easily by declaring the `items.**` path as a dependency:\\n\\n```js\\ntotalAmount.depends = \\\"items.**\\\";\\n```\"\r\n          }\r\n        ],\r\n        \"html\": \"\",\r\n        \"code\": \"\",\r\n        \"url\": \"samples/computed/shopping-cart/top-level\",\r\n        \"height\": \"250\",\r\n        \"title\": \"Shopping cart\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"See also:\\n- the [Tag `depends` option](#tagoptions@depends)\\n- the [*Using the {^{for}} tag as a 'purchases' grid control*](#samples/sort-filter@jsv-for) sample\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Observing computed observables\",\r\n        \"text\": \"`depends` declarations and `$.observe()` calls both use paths such as `\\\"manager.name\\\"` for listening to changes in the `manager.name`, as in:\\n\\n```js\\ngetNamesList.depends = [\\\"manager.name\\\", ...]; // Dependency declaration for team.getNamesList()\\n```\\n\\n```js\\n$.observe(team, \\\"manager.name\\\", myHandler); // Observe changes in manager.name\\n```\\n\\nIf `manager.fullName()` is a *computed observable* then the corresponding path (for listening to changes in the `manager.fullName()`) is `\\\"manager.fullName\\\"` (*without parens*) -- as in:\\n\\n```js\\ngetNamesList.depends = [\\\"manager.fullName\\\", ...]; // Dependency declaration for team.getNamesList()\\n```\\n\\n```js\\n$.observe(team, \\\"manager.fullName\\\", myHandler); // Observe changes in manager.fullName()\\n```\\n\\nSee [`$.observe()` with computed observables](#observe@computed).\",\r\n        \"anchor\": \"dependspath\"\r\n      }\r\n    ]\r\n  },\r\n  \"namespaces\": {\r\n    \"title\": \"Event binding namespaces (advanced)\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"**Note:** This feature will not be needed for simple applications -- but can be useful for certain large scale or complex apps.\\n\\n`$.observe()`, `$.unobserve()`, `.observeAll()`, `.unobserveAll()`, *observable object* (`.setProperty()`) and *observable array* (`.insert()` etc.),  are all implemented using jQuery event framework, and they support the use of *namespaces* in the same way that jQuery [`.on()`](http://api.jquery.com/on/), [`.off()`](http://api.jquery.com/on/) and [`.trigger()`](http://api.jquery.com/trigger/) support namespaces.\\n\\nAs with the jQuery API, a namespace is a string -- generally one or more dot-separated tokens, such as `\\\"module1.module2\\\"`. More than one namespace can be provided, with white-space separation -- as in `\\\"case1.outer case2\\\"` -- in order to create more than one event binding with different namespaces.\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"$.observe() handler bindings &ndash; with namespaces\",\r\n        \"text\": \"An optional `namespace` parameter can be included, before all the other parameters in the [`$.observe(...)`](#observe) call:\\n\\n```js\\n$.observe(namespace, myObjectOrArray, ..., myHandler);\\n```\\n\\nThis will associate the chosen namespace with the propertyChange/arrayChange event binding.\\n\\nExamples:\\n\\n```js\\n$.observe(\\\"case1\\\", person, \\\"name\\\", myHandler); \\n// binds a propertyChange.case1 event on person, for myHandler\\n\\n$.observe(\\\"scenario1\\\", person, \\\"address\\\", myHandler);\\n// binds a propertyChange.scenario1 event on person, for myHandler\\n\\n$.observe(\\\"case1.scenario2\\\", myArray, myHandler);\\n// binds an arrayChange.case1.scenario2 event on myArray, for myHandler\\n\\n$.observe(\\\"case1.scenario2\\\", myArray, team, \\\"manager.name\\\", myHandler);\\n// binds an arrayChange.case1.scenario2 event on myArray, for myHandler\\n// binds a propertyChange.case1.scenario2 event on team, for myHandler\\n```\\n\\n*White-space-separated namespaces:*\\n\\nA `observe()` call associated with multiple namespaces such as `\\\"case1.scenario2 scenario1\\\"` will add event bindings for each namespace:\\n\\n```js\\n$.observe(\\\"case1.scenario2 scenario1\\\", myArray, team, \\\"manager.name\\\", myHandler);\\n// binds an arrayChange.case1.scenario2 event on myArray, for myHandler\\n// binds an arrayChange.scenario1 event on myArray, for myHandler\\n// binds a propertyChange.case1.scenario2 event on person.manager, for myHandler\\n// binds a propertyChange.scenario1 event on person.manager, for myHandler\\n```\",\r\n        \"anchor\": \"observe\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \".observeAll() handler bindings &ndash; with namespaces\",\r\n        \"text\": \"An optional `namespace` parameter can be included before the `objectOrArray` parameter in the `$.observable(objectOrArray).observeAll(handler)` call:\\n\\n```js\\n$.observable(namespace, myObjectOrArray).observeAll(myHandler);\\n```\\n\\nThis will associate the chosen namespace with all the propertyChange/arrayChange event bindings that are created by `observeAll()`.\\n\\nExample:\\n\\n```js\\n$.observable(\\\"case1.scenario2\\\", team).observeAll(myHandler);\\n// binds propertyChange.case1.scenario2/arrayChange.case1.scenario2 events\\n// on objects/arrays under team, for myHandler\\n\\n$.observable(\\\"case1 case2\\\", team).observeAll(myHandler); // (multiple bindings)\\n// binds propertyChange.case1/arrayChange.case1 events on objects/arrays under team, for myHandler\\n// and propertyChange.case2/arrayChange.case2 events on objects/arrays under team, for myHandler\\n```\\n\\nAs with `observe()`, an `observeAll()` call associated with multiple (white-space separated) namespaces such as `\\\"case1.scenario2 scenario1\\\"` will add event bindings for each namespace.\",\r\n        \"anchor\": \"observeall\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"$.observable(...).setProperty(...) with namespaces\",\r\n        \"text\": \"An optional `namespace` parameter can be included before the `object` parameter in the `$.observable(object).setProperty(...)` call:\\n\\n```js\\n$.observable(namespace, myObject).setProperty(...);\\n```\\n\\nThis will only trigger *observable change* handlers that are ***associated with the same namespace***.\\n\\nExample:\\n\\n```js\\n$.observable(\\\"case1.scenario2\\\", person).setProperty(\\\"name\\\", \\\"newName\\\");\\n// triggers only handlers that are associated with the `\\\"case1.scenario2\\\"` namespace tokens.\\n```\\n\\nThe above namespaced `setProperty` call will trigger the `myHandler1`, `myHandler2` and `myHandler3` bindings below, but not the `myHandler5`, `myHandler5` or `myHandler6` bindings:\\n\\n```js \\n$.observe(\\\"case1.scenario2\\\", person, \\\"name\\\", myHandler1);       // Triggered\\n$.observe(\\\"scenario2.foo.case1\\\", person, \\\"name\\\", myHandler2);   // Triggered\\n$.observable(\\\"scenario2.case1\\\", person).observeAll(myHandler3); // Triggered \\n\\n$.observe(person, \\\"name\\\", myHandler4);                          // Not triggered \\n$.observe(\\\"scenario2\\\", person, \\\"name\\\", myHandler5);             // Not triggered\\n$.observable(person).observeAll(myHandler6);                    // Not triggered\\n```\",\r\n        \"anchor\": \"setprop\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"$.observable(...).insert(...) etc. &ndash; with namespaces\",\r\n        \"text\": \"Just as with `propertyChange` operations on *observable objects *(above), *observable array* operations: `insert()`, `remove()`, `move()` and `refresh()`can also be scoped to namespaces.\\n\\nAn optional `namespace` parameter can be included before the `array` parameter in the `$.observable(array).insert(...)` call:\\n\\n```js\\n$.observable(namespace, myObject).insert(...);\\n```\\n\\nand similarly for the other operations, such as `remove()`.\\n\\nThis will only trigger *observable change* handlers that are ***associated with the same namespace***.\\n\\nExample:\\n\\n```js\\n$.observable(\\\"case1.scenario2\\\", phones).insert(newPhone);\\n// triggers only handlers that are associated with the `\\\"case1.scenario2\\\"` namespace tokens.\\n```\\n\\nThe above namespaced `insert` call will trigger the `myHandler1`, `myHandler2` and `myHandler3` bindings below, but not the `myHandler5`, `myHandler5` or `myHandler6` bindings:\\n\\n```js \\n$.observe(\\\"case1.scenario2\\\", phones, myHandler1);               // Triggered\\n$.observe(\\\"scenario2.foo.case1\\\", phones, myHandler2);           // Triggered\\n$.observable(\\\"scenario2.case1\\\", person).observeAll(myHandler3); // Triggered - for person.phones \\n\\n$.observe(phones, myHandler4);                                  // Not triggered \\n$.observe(\\\"scenario2\\\", phones, myHandler5);                     // Not triggered\\n$.observable(person).observeAll(myHandler6);                    // Not triggered\\n```\",\r\n        \"anchor\": \"insert\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Accessing namespaces in the 'observable change' handler\",\r\n        \"text\": \"\\nWhen the *observable change* handler is triggered, the associated namespace can be accessed as:\\n\\n```js\\nfunction myHandler(ev, eventArgs) {\\n  // ev.data.ns - the namespace used in the handler binding\\n  // ev.namespace - the namespace used in the `$.observable(...).setProperty/insert/remove/move/refresh` call\\n}\\n```\",\r\n        \"anchor\": \"handler\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"Using namespaces for selective removal of bindings\",\r\n        \"text\": \"Namespaces can be very useful for removing a specific collection of bindings in a single call, filtering by namespace tokens.\\n\\n```js\\n$.unobserve(namespace, ...);\\n```\\n\\nThis will only remove handler bindings that are ***associated with the same namespace***.\\n\\nFor example any of the following calls:\\n\\n```js\\n$.unobserve(\\\"case1.scenario2\\\", person, \\\"name\\\", myHandler);\\n$.unobserve(\\\"case1.scenario2\\\", person, \\\"name\\\");\\n$.unobserve(\\\"case1.scenario2\\\", person);\\n$.unobserve(\\\"case1.scenario2\\\");\\n$.observable(\\\"case1.scenario2\\\", person).unobserveAll(myHandler);\\n$.observable(\\\"case1.scenario2\\\", person).unobserveAll();\\n```\\n\\nwill remove all of the following bindings:\\n\\n```js \\n$.observe(\\\"case1.scenario2\\\", person, \\\"name\\\", myHandler);       // Removed\\n$.observe(\\\"scenario2.foo.case1\\\", person, \\\"name\\\", myHandler);   // Removed\\n$.observable(\\\"scenario2.case1\\\", person).observeAll(myHandler); // Removed \\n```\\n\\nbut will not remove the following bindings:\\n\\n```js \\n$.observe(person, \\\"name\\\", myHandler);                          // Not removed \\n$.observe(\\\"scenario2\\\", person, \\\"name\\\", myHandler);             // Not removed\\n$.observable(person).observeAll(myHandler);                    // Not removed\\n```\\n\\n*White-space-separated namespaces:*\\n\\nAn `unobserve()` or `unobserveAll()` call associated with multiple namespaces such as:\\n\\n```js\\n$.unobserve(\\\"case1.scenario2 scenario1\\\", ...);\\n```\\n\\nwill remove both `\\\"case1.scenario2\\\"` handler bindings and `\\\"scenario1\\\"` handler bindings.  \",\r\n        \"anchor\": \"remove\"\r\n      }\r\n    ]\r\n  },\r\n  \"jsoadvanced\": {\r\n    \"title\": \"JsObservable &ndash; advanced topics\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"hash\": \"namespaces\",\r\n            \"label\": \"Namespaces\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"removeprop\": {\r\n    \"title\": \"Making observable changes: $.observable(object).removeProperty()\",\r\n    \"path\": \"\",\r\n    \"sections\": [\r\n      {\r\n        \"_type\": \"api\",\r\n        \"typeLabel\": \"API:\",\r\n        \"title\": \"$.observable(myObject).removeProperty(path)\",\r\n        \"name\": \"removeProperty\",\r\n        \"object\": \"$.observable(object)\",\r\n        \"method\": true,\r\n        \"returns\": \"this\",\r\n        \"signatures\": [\r\n          {\r\n            \"_type\": \"signature\",\r\n            \"title\": \"\",\r\n            \"params\": [\r\n              {\r\n                \"_type\": \"param\",\r\n                \"name\": \"path\",\r\n                \"type\": \"string\",\r\n                \"optional\": false,\r\n                \"description\": \"Path (e.g. \\\"address.street\\\") or name (e.g. \\\"firstName\\\") for the property\"\r\n              }\r\n            ],\r\n            \"args\": [],\r\n            \"sections\": [],\r\n            \"example\": \"$.observable(book).removeProperty(\\\"title\\\");\",\r\n            \"description\": \"Remove an object property\"\r\n          }\r\n        ],\r\n        \"description\": \"Remove an object property (as an observable change)\",\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"sample\": \"sample\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"anchor\": \"api\"\r\n      },\r\n      {\r\n        \"_type\": \"para\",\r\n        \"title\": \"\",\r\n        \"text\": \"Here is a sample where we remove a `ZIP` property from `person.address`. We use both a <a href=\\\"#linked-tag-syntax\\\">data-linked template</a> and an event handler for <a href=\\\"#onpropchange\\\">propertyChange</a> to respond to the observable property changes:\\n\\n\"\r\n      },\r\n      {\r\n        \"_type\": \"sample\",\r\n        \"typeLabel\": \"Sample:\",\r\n        \"codetabs\": [],\r\n        \"sectionTypes\": {\r\n          \"para\": \"para\",\r\n          \"data\": \"data\",\r\n          \"template\": \"template\",\r\n          \"code\": \"code\",\r\n          \"links\": \"links\"\r\n        },\r\n        \"sections\": [\r\n          {\r\n            \"_type\": \"template\",\r\n            \"title\": \"\",\r\n            \"markup\": \"<input data-link=\\\"address.ZIP\\\" /><br/><br/>\\n{^{if address.ZIP === undefined}}\\n  <b>ZIP is undefined</b>\\n{{else}}\\n  <b>ZIP:</b> {^{:address.ZIP}}\\n{{/if}} \"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Remove property\",\r\n            \"code\": \"$.observable(person).removeProperty(\\\"address.ZIP\\\");\\n\\n\"\r\n          },\r\n          {\r\n            \"_type\": \"code\",\r\n            \"title\": \"Listen to changes\",\r\n            \"code\": \"$(person.address).on(\\\"propertyChange\\\", changeHandler);\\n\\n// Alternatively we could have used: $.observe(person, \\\"address.ZIP\\\", changeHandler);\"\r\n          }\r\n        ],\r\n        \"html\": \"<div class=\\\"left\\\">\\n  <button id=\\\"set\\\">Set ZIP</button>\\n  <button id=\\\"remove\\\">Remove ZIP</button>\\n  <div id=\\\"result\\\"></div>\\n</div>\\n\\n<div class=\\\"logBox\\\">\\n  <label>Changes:</label>\\n  <div id=\\\"messages\\\"></div>\\n</div>\\n\\n<script id=\\\"personTmpl\\\" type=\\\"text/x-jsrender\\\">\\n  <input data-link=\\\"address.ZIP\\\" /><br/><br/>\\n  {^{if address.ZIP === undefined}}\\n    <b>ZIP is undefined</b>\\n  {{else}}\\n    <b>ZIP:</b> {^{>address.ZIP}}\\n  {{/if}}  \\n</script>\",\r\n        \"code\": \"var person = {\\n  address: {\\n    street: \\\"1st Ave\\\",\\n    ZIP: \\\"00000\\\"\\n  }\\n};\\n\\n$(\\\"#set\\\").on(\\\"click\\\", function() {\\n  $.observable(person).setProperty(\\\"address.ZIP\\\", \\\"33444\\\");\\n});\\n\\n$(\\\"#remove\\\").on(\\\"click\\\", function() {\\n  $.observable(person).removeProperty(\\\"address.ZIP\\\");\\n});\\n\\nvar tmpl = $.templates(\\\"#personTmpl\\\");\\n\\ntmpl.link(\\\"#result\\\", person);\\n\\n$(person.address).on(\\\"propertyChange\\\", changeHandler); \\n\\nfunction changeHandler(ev, eventArgs) {\\n  var message = '' + eventArgs.path + ': '\\n    + (eventArgs.value === undefined ? 'undefined' : '\\\"'\\n    + $.views.converters.encode(eventArgs.value) + '\\\"'); // Encode < > and & for display\\n  $(\\\"#messages\\\").append(message + \\\"<br/>\\\");\\n}\",\r\n        \"title\": \"Removing a property\",\r\n        \"height\": \"130\",\r\n        \"anchor\": \"remove\",\r\n        \"header\": \"<link href=\\\"/samples/change-log.css\\\" rel=\\\"stylesheet\\\"/>\",\r\n        \"action\": \"append\"\r\n      },\r\n      {\r\n        \"_type\": \"links\",\r\n        \"title\": \"See also:\",\r\n        \"links\": [],\r\n        \"topics\": [\r\n          {\r\n            \"_type\": \"topic\",\r\n            \"hash\": \"setprop\",\r\n            \"label\": \"$.observable(object).setProperty()\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n};"]}