{"version":3,"sources":["slider.js"],"names":["$","round","val","Math","clamp","num","min","max","views","tags","slider","setSize","mainElement","init","tagCtx","tag","this","content","tmpl","markup","mouseMoveOff","document","off","inline","template","trim","onBind","props","handle","mainElem","find","first","on","ev","valFromPosition","newX","newVal","metrics","left","scale","clientX","moveTo","ev2","preventDefault","onUnbind","linkCtx","ctx","eventArgs","onAfterLink","setMetrics","onUpdate","setValue","x","offset","handleWidth","updateValue","box","width","jQuery"],"mappings":";;CAOA,SAAUA,GACV,YAqGA,SAASC,GAAMC,GACb,MAAOC,MAAKF,MAAM,IAAIC,GAAK,IAG7B,QAASE,GAAMC,EAAKC,EAAKC,GACvB,MAAOD,GAAIC,EACPF,GAAOE,EAAMA,EAAMF,GAAOC,EAAMA,EAAMD,EACtCA,GAAOC,EAAMA,EAAMD,GAAOE,EAAMA,EAAMF,EA1G5CL,EAAEQ,MAAMC,MACRC,QAEEC,SAAS,EACTC,YAAa,aAEbC,KAAM,SAASC,GACb,GAAIC,GAAMC,KACRC,EAAUH,EAAOI,KAAKC,MAGxBH,MAAKI,aAAe,WAClBpB,EAAEqB,UAAUC,IAAI,wBAGdP,EAAIQ,SACNR,EAAIS,SAAWP,EAAUjB,EAAEyB,KAAKR,GAAW,4DAI/CS,OAAQ,SAASZ,GACf,GAAIC,GAAMC,KACRV,EAAMQ,EAAOa,MAAMrB,IACnBC,EAAMO,EAAOa,MAAMpB,GACrBO,GAAOc,OAASd,EAAOe,SAASC,KAAK,WAAWC,QAGhDjB,EAAOe,SAASG,GAAG,uBAAwB,SAASC,GAElD,QAASC,GAAgBC,GACvBC,EAAShC,EACPH,EAAMK,GAAO6B,EAAOrB,EAAOuB,QAAQC,MAAMxB,EAAOuB,QAAQE,OACxDjC,EAAKC,GAJT,GAAI6B,EAMJF,GAAgBD,EAAGO,SAEnBzB,EAAI0B,OAAOL,GAGXpC,EAAEqB,UAAUW,GAAG,sBAAuB,SAASU,GAC7CR,EAAgBQ,EAAIF,SAChBJ,IAAWtB,EAAOZ,MACpBY,EAAOZ,IAAMkC,EAEbrB,EAAI0B,OAAOL,IAEbH,EAAGU,mBAELV,EAAGU,mBAIL3C,EAAEqB,UAAUW,GAAG,mBAAoBhB,KAAKI,eAG1CwB,SAAU,SAAS9B,EAAQ+B,EAASC,EAAKb,EAAIc,GAE3C/C,EAAEqB,UAAUC,IAAI,mBAAoBN,KAAKI,eAG3C4B,YAAa,SAASlC,EAAQ+B,EAASC,EAAKb,EAAIc,GACzCA,GAGH/B,KAAKiC,WAAWnC,IAGpBoC,UAAU,EAEVC,SAAU,SAASC,GAEjB,GAAItC,GAASE,KAAKF,OAChBR,EAAMQ,EAAOa,MAAMrB,IACnBC,EAAMO,EAAOa,MAAMpB,IACnB8B,EAAUvB,EAAOuB,OACnBe,GAAIhD,EAAMgD,EAAG9C,EAAKC,GAClBO,EAAOc,OAAOyB,QAAQf,MAAOc,EAAE9C,GAAK+B,EAAQE,MAAQF,EAAQC,KAAOD,EAAQiB,eAG7Eb,OAAQ,SAASW,GAEfpC,KAAKmC,SAASC,GAEdpC,KAAKuC,YAAYH,GAAG,IAGtBH,WAAY,SAASnC,GACnB,GAAIA,GAASA,GAAUE,KAAKF,OAC1B0C,EAAM1C,EAAOe,QACff,GAAOuB,SACLC,KAAMkB,EAAIH,SAASf,KACnBmB,MAAOD,EAAIC,QACXlB,MAAOiB,EAAIC,SAAS3C,EAAOa,MAAMpB,IAAIO,EAAOa,MAAMrB,KAClDgD,YAAaxC,EAAOc,OAAO6B,QAAQ,QAgBtCzC,KAAK0C","file":"slider.min.js","sourcesContent":["/*! Sample JsViews tag control: {{slider}} control v1.0.3\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n * Copyright 2019, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\nslider: {\n  // Movable slider handle, within slider box\n  setSize: true,\n  mainElement: \".sliderbox\",\n\n  init: function(tagCtx) {\n    var tag = this,\n      content = tagCtx.tmpl.markup;\n\n    // Define handler specific to this slider, to be used for end of drag\n    this.mouseMoveOff = function() {\n      $(document).off(\"mousemove touchmove\");\n    };\n\n    if (tag.inline) {\n      tag.template = content ? $.trim(content) : '<div class=\"sliderbox\"><div class=\"handle\"></div></div>';\n    }\n  },\n\n  onBind: function(tagCtx) {\n    var tag = this,\n      min = tagCtx.props.min,\n      max = tagCtx.props.max;\n    tagCtx.handle = tagCtx.mainElem.find(\".handle\").first();\n\n    // Register handler for mouse click or start of drag\n    tagCtx.mainElem.on(\"mousedown touchstart\", function(ev) {\n      var newVal;\n      function valFromPosition(newX) {\n        newVal = clamp(\n          round(min + (newX - tagCtx.metrics.left)/tagCtx.metrics.scale),\n          min, max);\n      }\n      valFromPosition(ev.clientX);\n      // User click in box: move handle to clicked position\n      tag.moveTo(newVal);\n\n      // Register handler for mousemove during drag\n      $(document).on(\"mousemove touchmove\", function(ev2) {\n        valFromPosition(ev2.clientX);\n        if (newVal !== tagCtx.val) {\n          tagCtx.val = newVal;\n          // User mousemove - sliding handle: move handle to new position\n          tag.moveTo(newVal);\n        }\n        ev.preventDefault();\n      });\n      ev.preventDefault();\n    });\n\n    // Register slider-specific handler for end of drag\n    $(document).on(\"mouseup touchend\", this.mouseMoveOff);\n  },\n\n  onUnbind: function(tagCtx, linkCtx, ctx, ev, eventArgs) {\n    // Remove handler for end of drag specific to this slider\n    $(document).off(\"mouseup touchend\", this.mouseMoveOff);\n  },\n\n  onAfterLink: function(tagCtx, linkCtx, ctx, ev, eventArgs) {\n    if (!eventArgs) {\n      // We set metrics here, after initial linking. This event is preceded by\n      // 1) onBind event 2) setting of Width and height of mainElem\n      this.setMetrics(tagCtx); \n    }\n  },\n  onUpdate: false,\n\n  setValue: function(x) {\n    // Move the handle to the new position x\n    var tagCtx = this.tagCtx,\n      min = tagCtx.props.min,\n      max = tagCtx.props.max,\n      metrics = tagCtx.metrics;\n    x = clamp(x, min, max);\n    tagCtx.handle.offset({left: (x-min)*metrics.scale + metrics.left - metrics.handleWidth});\n  },\n\n  moveTo: function(x) {\n    // Call setValue() to move the handle to position x\n    this.setValue(x);\n    // Call updateValue() to change the external data-linked data to the new value x\n    this.updateValue(x, true); // Async update\n  },\n\n  setMetrics: function(tagCtx) {\n    var tagCtx = tagCtx || this.tagCtx,\n      box = tagCtx.mainElem;\n    tagCtx.metrics = {\n      left: box.offset().left,\n      width: box.width(),\n      scale: box.width()/(tagCtx.props.max-tagCtx.props.min),\n      handleWidth: tagCtx.handle.width()/2\n    };\n  }\n}\n});\n\nfunction round(val) {\n  return Math.round(100*val)/100;\n}\n\nfunction clamp(num, min, max) {\n  return min>max\n    ? num <= max ? max : num >= min ? min : num\n    : num <= min ? min : num >= max ? max : num;\n}\n\n})(this.jQuery);\n"]}