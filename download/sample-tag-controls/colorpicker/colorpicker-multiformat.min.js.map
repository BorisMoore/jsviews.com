{"version":3,"sources":["colorpicker-multiformat.js"],"names":["$","round","val","Math","validateTiny","clr","tiny","tinycolor","isValid","toHsv","h","s","v","a","currentColor","tag","ctxPrm","color","updateHslaValues","hsla","ctx","parentTags","picker","setValues","updateValues","views","tags","bindTo","linkedCtxParam","undefined","mainElement","onBind","this","sliders","childTags","hueslider","alphaslider","areaslider","currentHsvaColor","setValue","i","tagElse","onAfterLink","tagCtx","linkCtx","ev","eventArgs","setMetrics","convert","arg1","arg2","arg3","arg4","mode","arg","r","g","b","convertBack","args","extend","arguments","toRgb","toHex8String","template","markup","converters","rnd","fromhex","hex","stohsv","test","hsl","toHsl","ltohsv","l","rtohsv","rgb","gtohsv","btohsv","lhsl","shsl","toRgbString","rgbGrad","onUpdate","toHexString","rgba","rgbafromrgb","hexfromrgb","rgbafromhex","jQuery"],"mappings":"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","file":"colorpicker-multiformat.min.js","sourcesContent":["/*! Sample JsViews tag control: {{picker}} control v1.0.0\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n * Copyright 2018, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\npicker: {\n  // Bind to HSVA color parameters and mode. Color parameters will be HSVA, RGBA or HEX, depending on mode\n  bindTo: [0, 1, 2, 3, \"mode\"],\n  linkedCtxParam: [\"h\", \"s\", \"v\", \"a\", undefined],\n  mainElement: \"div\",\n  onBind: function() {\n    // Provide reference vars to access component controls\n    var tag = this,\n      sliders = tag.childTags(\"slider\");\n    tag.hueslider = sliders[0];\n    tag.alphaslider = sliders[1];\n    tag.areaslider = tag.childTags(\"areaslider\")[0];\n    tag.currentHsvaColor = [];\n  },\n  setValue: function(val, i, tagElse) {\n    this.currentHsvaColor[i] = val;\n  },\n  onAfterLink: function(tagCtx, linkCtx, ctx, ev, eventArgs) {\n    if (!eventArgs) {\n      // Update the UI width height and position metrics for each component control\n      var tag = this;\n      tag.hueslider.setMetrics();\n      tag.alphaslider.setMetrics();\n      tag.areaslider.setMetrics();\n    }\n  },\n  convert: function(arg1, arg2, arg3, arg4, mode) {\n    mode = mode || \"hsva\";\n    var arg;\n    switch (mode) {\n      case \"hsva\":\n        // This is our internal format, so return as is\n        return [arg1, arg2, arg3, arg4, mode];\n      case \"rgba\":\n        // Convert from RGBA to our internal HSVA format\n        arg = tinycolor({r: arg1, g: arg2, b: arg3, a: arg4}).toHsv();\n        break;\n      case \"hex\":\n        // Convert from HEX to our internal HSVA format\n        arg = tinycolor(arg1).toHsv();\n        break;\n    }\n    return [arg.h, arg.s, arg.v, arg.a, mode];\n  },\n  convertBack: function() {\n    var color,\n      args = $.extend([], this.currentHsvaColor, arguments),\n      h = args[0], s = args[1], v = args[2], a = args[3], mode = args[4];\n\n    switch (mode) {\n      case \"hsva\":\n        // External format is same as internal format, so return as is\n        return [h, s, v, a];\n      case \"rgba\":\n        color = tinycolor({h: h, s: s, v: v, a: a});\n        // Convert from internal HSVA format to RGBA external format\n        color = color.toRgb();\n        return [color.r, color.g, color.b, color.a];\n      case \"hex\":\n        // Convert from internal HSVA format to HEX external format\n        color = tinycolor({h: h, s: s, v: v, a: a});\n        return [color.toHex8String()];\n    }\n  },\n  template: {\n    // The template markup\n    markup:\n      '<div class=\"popover\">'\n      + '{^{areaslider ~s ~v xMin=0 xMax=1 yMin=1 yMax=0 width=\"100%\" convert=~cvt convertBack=~cbk}}'\n        + '<div class=\"sliderbox sat fill\" data-link=\"css-background-color{rgb:~h 100 100}\">'\n          + '<div class=\"val fill\">'\n            + '<div class=\"dragger\" data-link=\"css-background-color{rgb:~h ~s ~v}\"></div>'\n          + '</div>'\n        + '</div>'\n      + '{{/areaslider}}'\n      + '<span class=\"swatch\">'\n        + '<span class=\"swatch-inner\" data-link=\"css-background-color{rgba:~h ~s ~v ~a}\"></span>'\n      + '</span>'\n      + '{^{slider ~h min=360 max=0 class=\"hue\"/}}'\n      + '{^{slider ~a min=0 max=1}}'\n        + '<div class=\"sliderbox alpha\">'\n          + '<div class=\"handle\"></div>'\n          + '<div class=\"alpha-background\" data-link=\"css-background-image{rgbGrad:~h ~s ~v}\"></div>'\n        + '</div>'\n      + '{{/slider}}'\n      + '{^{spinblock}}'\n        + '<div class=\"spinblock-text spinblock-hex\">'\n          + '<input class=\"spinblock-value\" maxlength=\"20\" data-link=\"{hex:~h ~s ~v ~a:fromhex}\"/>'\n          + '<div class=\"spinblock-label\">HEX</div>'\n        + '</div>'\n      + '{{else}}'\n        + '<div class=\"spinblock-text\">'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{r:~h ~s ~v:rtohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{g:~h ~s ~v:gtohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{b:~h ~s ~v:btohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"~a\"/>'\n          + '<div class=\"spinblock-label\">RGBA</div>'\n        + '</div>'\n      + '{{else}}'\n        + '<div class=\"spinblock-text\">'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{rnd:~h:rnd}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{shsl:~h ~s ~v ~a:stohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{lhsl:~h ~s ~v ~a:ltohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"~a\"/>'\n          + '<div class=\"spinblock-label\">HSLA</div>'\n        + '</div>'\n      + '{{/spinblock}}'\n    + '</div>',\n\n    // Color converters used within the template (defined as converters scoped to this template)\n    converters : {\n      rnd: function(val) { \n        return Math.round(val);\n      },\n      fromhex: function(hex) { \n        updateHslaValues(this, validateTiny(hex));\n      },\n      stohsv: function(s) { \n        if (/^[\\d\\.]{1,3}%$/.test(s)) {\n          var hsl = currentColor(this).toHsl();\n          hsl.s = s;\n          updateHslaValues(this, validateTiny(hsl));\n        }\n      },\n      ltohsv: function(l) { \n        if (/^[\\d\\.]{1,3}%$/.test(l)) {\n          var hsl = currentColor(this).toHsl();\n          hsl.l = l;\n          updateHslaValues(this, validateTiny(hsl));\n        }\n      },\n      rtohsv: function(r) { \n        if (/^\\d{1,3}$/.test(r)) {\n          var rgb = currentColor(this).toRgb();\n          rgb.r = r;\n          updateHslaValues(this, validateTiny(rgb));\n        }\n      },\n      gtohsv: function(g) { \n        if (/^\\d{1,3}$/.test(g)) {\n          var rgb = currentColor(this).toRgb();\n          rgb.g = g;\n          updateHslaValues(this, validateTiny(rgb));\n        }\n      },\n      btohsv: function(b) { \n        if (/^\\d{1,3}$/.test(b)) {\n          var rgb = currentColor(this).toRgb();\n          rgb.b = b;\n          updateHslaValues(this, validateTiny(rgb));\n        }\n      },\n      lhsl: function(h, s, v, a) {\n        return Math.round(color(h, s, v, a).toHsl().l*100) + \"%\";\n      },\n      shsl: function(h, s, v, a) {\n        return Math.round(color(h, s, v, a).toHsl().s*100) + \"%\";\n      },\n      r: function(h, s, v, a) {\n        return color(h, s, v, a).toRgb().r;\n      },\n      g: function(h, s, v, a) {\n        return color(h, s, v, a).toRgb().g;\n      },\n      b: function(h, s, v, a) {\n        return color(h, s, v, a).toRgb().b;\n      },\n      rgb: function(h, s, v, a) {\n        return tinycolor({h: h, s: s, v: v}).toRgbString();\n      },\n      rgbGrad: function(h, s, v) {\n        return \"linear-gradient(to right, rgba(0, 0, 0, 0), \" + tinycolor({h: h, s: s, v: v}).toRgbString() + \")\";\n      }\n    }\n  },\n  onUpdate: false\n}\n});\n\n$.views.converters({ // Global converters\n  hex: function(h, s, v, a) {\n    return (a < 1 ? color(h, s, v, a).toHex8String(true) : tinycolor({h: h, s: s, v: v}).toHexString(true));\n  },\n  rgba: function(h, s, v, a) { \n    return color(h, s, v, a).toRgbString();\n  },\n  rgbafromrgb: function(r, g, b, a) { \n    return tinycolor({r: r, g: g, b: b, a: a}).toRgbString();\n  },\n  hexfromrgb: function(r, g, b, a) {\n    return (a < 1 ? tinycolor({r: r, g: g, b: b, a: a}).toHex8String(true) : tinycolor({r: r, g: g, b: b}).toHexString(true));\n  },\n  rgbafromhex: function(hex) { \n    return tinycolor(hex).toRgbString();\n  }\n});\n\n// Utility functions\n\nfunction round(val) {\n  return Math.round(100*val)/100;\n}\n\nfunction clamp(num, min, max) {\n  return min>max\n    ? num <= max ? max : num >= min ? min : num\n    : num <= min ? min : num >= max ? max : num;\n}\n\nfunction validateTiny(clr) {\n  var tiny = tinycolor(clr);\n  if (!tiny.isValid()) {\n    return;\n  }\n  tiny = tiny.toHsv();\n  return [round(tiny.h), round(tiny.s), round(tiny.v), round(tiny.a)];\n}\n\nfunction currentColor(tag) {\n  return tinycolor({h: tag.ctxPrm(\"h\"), s: tag.ctxPrm(\"s\"), v:  tag.ctxPrm(\"v\"), a: tag.ctxPrm(\"a\")});\n}\n\nfunction color(h, s, v, a) {\n  return tinycolor({h: h, s: s, v: v, a: a});\n}\n\nfunction updateHslaValues(tag, hsla) {\n  if (hsla) {\n    tag.ctx.parentTags.picker\n      .setValues(hsla[0], hsla[1], hsla[2], hsla[3])\n      .updateValues(hsla[0], hsla[1], hsla[2], hsla[3]);\n  }\n}\n\n})(this.jQuery);\n"]}