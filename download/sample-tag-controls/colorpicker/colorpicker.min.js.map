{"version":3,"sources":["colorpicker.js"],"names":["$","round","val","Math","validateTiny","clr","tiny","tinycolor","isValid","toHsv","h","s","v","a","currentColor","tag","ctxPrm","color","updateHslaValues","hsla","ctx","parentTags","picker","updateValues","setValues","views","tags","bindTo","linkedCtxParam","mainElement","onBind","this","sliders","childTags","hueslider","alphaslider","areaslider","onAfterLink","tagCtx","linkCtx","ev","eventArgs","setMetrics","template","markup","converters","rnd","fromhex","hex","stohsv","test","hsl","toHsl","ltohsv","l","rtohsv","r","rgb","toRgb","gtohsv","g","btohsv","b","lhsl","shsl","toRgbString","rgbGrad","onUpdate","toHex8String","toHexString","rgba","jQuery"],"mappings":"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","file":"colorpicker.min.js","sourcesContent":["/*! Sample JsViews tag control: {{picker}} control v1.0.0\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n * Copyright 2018, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\npicker: {\n  // Bind to HSVA color parameters\n  bindTo: [0, 1, 2, 3],\n  linkedCtxParam: [\"h\", \"s\", \"v\", \"a\"],\n  mainElement: \"div\",\n  onBind: function() {\n    // Provide reference vars to access component controls\n    var tag = this,\n      sliders = tag.childTags(\"slider\");\n    tag.hueslider = sliders[0];\n    tag.alphaslider = sliders[1];\n    tag.areaslider = tag.childTags(\"areaslider\")[0];\n  },\n  onAfterLink: function(tagCtx, linkCtx, ctx, ev, eventArgs) {\n    if (!eventArgs) {\n      // Update the UI width height and position metrics for each component control\n      var tag = this;\n      tag.hueslider.setMetrics();\n      tag.alphaslider.setMetrics();\n      tag.areaslider.setMetrics();\n    }\n  },\n  template: {\n    // The template markup\n    markup:\n      '<div class=\"popover\">'\n      + '{^{areaslider ~s ~v xMin=0 xMax=1 yMin=1 yMax=0 width=\"100%\" convert=~cvt convertBack=~cbk}}'\n        + '<div class=\"sliderbox sat fill\" data-link=\"css-background-color{rgb:~h 100 100}\">'\n          + '<div class=\"val fill\">'\n            + '<div class=\"dragger\" data-link=\"css-background-color{rgb:~h ~s ~v}\"></div>'\n          + '</div>'\n        + '</div>'\n      + '{{/areaslider}}'\n      + '<span class=\"swatch\">'\n        + '<span class=\"swatch-inner\" data-link=\"css-background-color{rgba:~h ~s ~v ~a}\"></span>'\n      + '</span>'\n      + '{^{slider ~h min=360 max=0 class=\"hue\"/}}'\n      + '{^{slider ~a min=0 max=1}}'\n        + '<div class=\"sliderbox alpha\">'\n          + '<div class=\"handle\"></div>'\n          + '<div class=\"alpha-background\" data-link=\"css-background-image{rgbGrad:~h ~s ~v}\"></div>'\n        + '</div>'\n      + '{{/slider}}'\n      + '{^{spinblock}}'\n        + '<div class=\"spinblock-text spinblock-hex\">'\n          + '<input class=\"spinblock-value\" maxlength=\"20\" data-link=\"{hex:~h ~s ~v ~a:fromhex}\"/>'\n          + '<div class=\"spinblock-label\">HEX</div>'\n        + '</div>'\n      + '{{else}}'\n        + '<div class=\"spinblock-text\">'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{r:~h ~s ~v:rtohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{g:~h ~s ~v:gtohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{b:~h ~s ~v:btohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"~a\"/>'\n          + '<div class=\"spinblock-label\">RGBA</div>'\n        + '</div>'\n      + '{{else}}'\n        + '<div class=\"spinblock-text\">'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{rnd:~h:rnd}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{shsl:~h ~s ~v ~a:stohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"{lhsl:~h ~s ~v ~a:ltohsv}\"/>'\n          + '<input class=\"spinblock-value\" maxlength=\"4\" data-link=\"~a\"/>'\n          + '<div class=\"spinblock-label\">HSLA</div>'\n        + '</div>'\n      + '{{/spinblock}}'\n    + '</div>',\n\n    // Color converters used within the template (defined as converters scoped to this template)\n    converters : {\n      rnd: function(val) { \n        return Math.round(val);\n      },\n      fromhex: function(hex) { \n        updateHslaValues(this, validateTiny(hex));\n      },\n      stohsv: function(s) { \n        if (/^[\\d\\.]{1,3}%$/.test(s)) {\n          var hsl = currentColor(this).toHsl();\n          hsl.s = s;\n          updateHslaValues(this, validateTiny(hsl));\n        }\n      },\n      ltohsv: function(l) { \n        if (/^[\\d\\.]{1,3}%$/.test(l)) {\n          var hsl = currentColor(this).toHsl();\n          hsl.l = l;\n          updateHslaValues(this, validateTiny(hsl));\n        }\n      },\n      rtohsv: function(r) { \n        if (/^\\d{1,3}$/.test(r)) {\n          var rgb = currentColor(this).toRgb();\n          rgb.r = r;\n          updateHslaValues(this, validateTiny(rgb));\n        }\n      },\n      gtohsv: function(g) { \n        if (/^\\d{1,3}$/.test(g)) {\n          var rgb = currentColor(this).toRgb();\n          rgb.g = g;\n          updateHslaValues(this, validateTiny(rgb));\n        }\n      },\n      btohsv: function(b) { \n        if (/^\\d{1,3}$/.test(b)) {\n          var rgb = currentColor(this).toRgb();\n          rgb.b = b;\n          updateHslaValues(this, validateTiny(rgb));\n        }\n      },\n      lhsl: function(h, s, v, a) {\n        return Math.round(color(h, s, v, a).toHsl().l*100) + \"%\";\n      },\n      shsl: function(h, s, v, a) {\n        return Math.round(color(h, s, v, a).toHsl().s*100) + \"%\";\n      },\n      r: function(h, s, v, a) {\n        return color(h, s, v, a).toRgb().r;\n      },\n      g: function(h, s, v, a) {\n        return color(h, s, v, a).toRgb().g;\n      },\n      b: function(h, s, v, a) {\n        return color(h, s, v, a).toRgb().b;\n      },\n      rgb: function(h, s, v, a) {\n        return tinycolor({h: h, s: s, v: v}).toRgbString();\n      },\n      rgbGrad: function(h, s, v) {\n        return \"linear-gradient(to right, rgba(0, 0, 0, 0), \" + tinycolor({h: h, s: s, v: v}).toRgbString() + \")\";\n      }\n    }\n  },\n  onUpdate: false\n}\n});\n\n$.views.converters({ // Global converters\n  hex: function(h, s, v, a) {\n    return (a < 1 ? color(h, s, v, a).toHex8String(true) : tinycolor({h: h, s: s, v: v}).toHexString(true));\n  },\n  rgba: function(h, s, v, a) { \n    return color(h, s, v, a).toRgbString();\n  }\n});\n\n// Utility functions\n\nfunction round(val) {\n  return Math.round(100*val)/100;\n}\n\nfunction clamp(num, min, max) {\n  return min>max\n    ? num <= max ? max : num >= min ? min : num\n    : num <= min ? min : num >= max ? max : num;\n}\n\nfunction validateTiny(clr) {\n  var tiny = tinycolor(clr);\n  if (!tiny.isValid()) {\n    return;\n  }\n  tiny = tiny.toHsv();\n  return [round(tiny.h), round(tiny.s), round(tiny.v), round(tiny.a)];\n}\n\nfunction currentColor(tag) {\n  return tinycolor({h: tag.ctxPrm(\"h\"), s: tag.ctxPrm(\"s\"), v:  tag.ctxPrm(\"v\"), a: tag.ctxPrm(\"a\")});\n}\n\nfunction color(h, s, v, a) {\n  return tinycolor({h: h, s: s, v: v, a: a});\n}\n\nfunction updateHslaValues(tag, hsla) {\n  tag.ctx.parentTags.picker.updateValues(hsla[0], hsla[1], hsla[2], hsla[3]);\n};\n\nfunction updateHslaValues(tag, hsla) {\n  if (hsla) {\n    tag.ctx.parentTags.picker\n      .updateValues(hsla[0], hsla[1], hsla[2], hsla[3])\n      .setValues(hsla[0], hsla[1], hsla[2], hsla[3]);\n  }\n}\n\n})(this.jQuery);\n"]}