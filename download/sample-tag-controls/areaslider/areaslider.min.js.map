{"version":3,"sources":["areaslider.js"],"names":["$","round","val","Math","clamp","num","min","max","views","tags","areaslider","bindTo","setSize","mainElement","init","tagCtx","tag","this","content","tmpl","markup","mouseMoveOff","document","off","inline","template","trim","onBind","xMin","props","xMax","yMin","yMax","handle","mainElem","find","first","on","ev","valFromPosition","newX","newY","newXVal","metrics","left","xScale","newYVal","top","yScale","clientX","clientY","moveTo","ev2","xVal","yVal","preventDefault","onAfterLink","linkCtx","ctx","eventArgs","setMetrics","onUpdate","setValue","index","offset","handleHeight","handleWidth","x","y","setValues","updateValues","box","boxOffset","width","height","jQuery"],"mappings":"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","file":"areaslider.min.js","sourcesContent":["/*! Sample JsViews tag control: {{areaslider}} control v1.0.3\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n * Copyright 2019, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\nareaslider: {\n  // Movable 'dragger', within box\n  bindTo: [0, 1],\n  setSize: true,\n  mainElement: \".sliderbox\",\n\n  init: function(tagCtx) {\n    var tag = this,\n      content = tagCtx.tmpl.markup;\n\n    // Define handler specific to this areaslider, to be used for end of drag\n    tag.mouseMoveOff = function() {\n      $(document).off(\"mousemove touchmove\");\n    };\n\n    if (tag.inline) {\n      tag.template = content ? $.trim(content) : '<div class=\"sliderbox\"><div class=\"dragger\"></div></div>';\n    }\n  },\n\n  onBind: function(tagCtx) {\n    var tag = this,\n      xMin = tagCtx.props.xMin,\n      xMax = tagCtx.props.xMax,\n      yMin = tagCtx.props.yMin,\n      yMax = tagCtx.props.yMax;\n    tagCtx.handle = tagCtx.mainElem.find(\".dragger\").first();\n\n    // Register handler for mouse click or start of drag\n    tagCtx.mainElem.on(\"mousedown touchstart\", function(ev) {\n      var newXVal, newYVal;\n      function valFromPosition(newX, newY) {\n        newXVal = clamp(\n          round(xMin + (newX - tagCtx.metrics.left)/tagCtx.metrics.xScale),\n          xMin, xMax);\n        newYVal = clamp(\n          round(yMin + (newY - tagCtx.metrics.top)/tagCtx.metrics.yScale),\n          yMin, yMax);\n      }\n      valFromPosition(ev.clientX, ev.clientY);\n      // User click in box: move dragger to clicked position\n      tag.moveTo(newXVal, newYVal);\n\n      // Register handler for mousemove during drag\n      $(document).on(\"mousemove touchmove\", function(ev2) {\n        valFromPosition(ev2.clientX, ev2.clientY);\n        if (newXVal !== tagCtx.xVal || newYVal !== tagCtx.yVal) {\n          tagCtx.xVal = newXVal;\n          tagCtx.yVal = newYVal;\n          // User mousemove - sliding dragger: move dragger to new position\n          tag.moveTo(newXVal, newYVal);\n        }\n        ev.preventDefault();\n      });\n      ev.preventDefault();\n    });\n\n    // Register areaslider-specific handler for end of drag\n    $(document).on(\"mouseup touchend\", this.mouseMoveOff);\n  },\n\n  onAfterLink: function(tagCtx, linkCtx, ctx, ev, eventArgs) {\n    if (!eventArgs) {\n      // We set metrics here, after initial linking. This event is preceded by\n      // 1) onBind event 2) setting of Width and height of mainElem\n      this.setMetrics(tagCtx);\n    }\n  },\n  onUpdate: false,\n\n  setValue: function(val, index) {\n    // Move the dragger to the new x-position or y-position\n    var tagCtx = this.tagCtx,\n      xMin = tagCtx.props.xMin,\n      xMax = tagCtx.props.xMax,\n      yMin = tagCtx.props.yMin,\n      yMax = tagCtx.props.yMax,\n      metrics = tagCtx.metrics;\n    if (index) { // Change in y-position\n      val = clamp(val, yMin, yMax);\n      tagCtx.handle.offset({top: (val-yMin)*metrics.yScale + metrics.top - metrics.handleHeight});\n    } else { // Change in x-position\n      val = clamp(val, xMin, xMax);\n      tagCtx.handle.offset({left: (val-xMin)*metrics.xScale + metrics.left - metrics.handleWidth});\n    }\n  },\n\n  moveTo: function(x, y) {\n    // Call setValues() to move the dragger to new (x, y) position\n    this.setValues(x, y);\n    // Call updateValues() to change the external data-linked data to the new values (x, y)\n    this.updateValues(x, y, true); // Async update\n  },\n\n  setMetrics: function(tagCtx) {\n    var tagCtx = tagCtx || this.tagCtx,\n      box = tagCtx.mainElem,\n      boxOffset = box.offset();\n    tagCtx.metrics = {\n      left: boxOffset.left,\n      top: boxOffset.top,\n      xScale: box.width()/(tagCtx.props.xMax - tagCtx.props.xMin),\n      yScale: box.height()/(tagCtx.props.yMax - tagCtx.props.yMin),\n      handleWidth: tagCtx.handle.width()/2,\n      handleHeight: tagCtx.handle.height()/2\n    };\n  }\n}\n});\n\nfunction round(val) {\n  return Math.round(100*val)/100;\n}\n\nfunction clamp(num, min, max) {\n  return min>max\n    ? num <= max ? max : num >= min ? min : num\n    : num <= min ? min : num >= max ? max : num;\n}\n\n})(this.jQuery);\n"]}