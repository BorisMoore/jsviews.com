{"version":3,"sources":["tree-if.js"],"names":["$","views","tags","tree","template","toggle","data","this","tagCtx","view","observable","setProperty","expanded","jQuery"],"mappings":";;CAOA,SAAUA,GACV,YAEAA,GAAEC,MAAMC,MACNC,MACEC,SAAU,sQAoBVC,OAAQ,WACN,GAAIC,GAAOC,KAAKC,OAAOC,KAAKH,IAC5BN,GAAEU,WAAWJ,GAAMK,YAAY,YAAaL,EAAKM,eAKpDL,KAAKM","file":"tree-if.min.js","sourcesContent":["/*! Sample JsViews tag control: {{tree}} control using {^{if}} binding v1.0.2\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n * Copyright 2019, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\n  tree: {\n    template: '<li>' +\n    '{{if folders && folders.length}}' +\n      // If there are child items, show item, with a toggle button to expand/collapse children\n      '<span data-link=\"{on ~tag.toggle} {:expanded ? \\'-\\' : \\'+\\'}\" class=\"toggle\"></span> {{>name}}' +\n      '{^{if expanded}}' +\n        // If expanded, show the child items\n        '<ul>' +\n          '{{for folders}}' +\n            // Recursive {{tree}} call to display subtree\n            '{{tree/}}' +\n          '{{/for}}' +\n        '</ul>' +\n      '{{/if}}' +\n    '{{else}}' +\n      // If no child items, show just the item\n      '<span class=\"spacer\">&bull;</span> {{>name}}' +\n    '{{/if}}' +\n    '</li>',\n\n    //METHODS\n    toggle: function() {\n      var data = this.tagCtx.view.data;\n      $.observable(data).setProperty(\"expanded\", !data.expanded);\n    }\n  }\n});\n\n})(this.jQuery);\n"]}