{"version":3,"sources":["multiselect.js"],"names":["$","views","tags","multisel","boundProps","init","tagCtx","linkCtx","tag","this","valueProp","props","labelProp","items","selectedItems","selected","_optionsTmpl","inline","content","sub","error","template","elem","multiple","onBind","selectElem","contents","on","ev","evargs","newSelection","children","map","i","get","_selSet","observable","refresh","proxy","updateSelection","updateItems","onAfterLink","size","onDispose","off","onUpdate","attr","selection","val","l","length","inArray","remove","dataBoundOnly","jQuery"],"mappings":";;CAOA,SAAUA,GACV,YAEAA,GAAEC,MAAMC,MACJC,UACAC,YAAa,QACbC,KAAM,SAASC,EAAQC,GACrB,GAAIC,GAAMC,IACVD,GAAIE,UAAYF,EAAIF,OAAOK,MAAMD,WAAa,KAC9CF,EAAII,UAAYJ,EAAIF,OAAOK,MAAMC,WAAa,OAC9CJ,EAAIK,MAAQP,EAAOK,MAAME,MACzBL,EAAIM,cAAgBR,EAAOK,MAAMI,aACjCP,EAAIQ,aAAe,gDAAkDR,EAAIE,UAAY,SAAWF,EAAII,UAAY,sBAC5GJ,EAAIS,OACFX,EAAOY,QACTlB,EAAEC,MAAMkB,IAAIC,MAAM,iCAElBZ,EAAIa,SAAW,+BAAiCb,EAAIQ,aAAe,aAGrET,EAAQe,KAAKC,SAAW,WACxBf,EAAIa,SAAWb,EAAIQ,eAGvBQ,OAAQ,SAASlB,EAAQC,GACvB,GAAIC,GAAMC,IACVD,GAAIiB,WAAajB,EAAIS,OAAST,EAAIkB,SAAS,UAAY1B,EAAEO,EAAQe,MACjEd,EAAIiB,WAAWE,GAAG,SAAU,SAASC,EAAIC,GACrC,GAAIC,GAAetB,EAAIiB,WAAWM,WAAWC,IAAI,SAASC,GACxD,MAAOxB,MAAKM,UAAYP,EAAIK,MAAMoB,IAAM,OACvCC,KAEL1B,GAAI2B,SAAU,EACdnC,EAAEoC,WAAW5B,EAAIM,eAAeuB,QAAQP,GACxCtB,EAAI2B,SAAU,IAEhBnC,GAAGQ,EAAIM,gBAAgBa,GAAG,cAAe3B,EAAEsC,MAAM9B,EAAI+B,gBAAiB/B,IACtER,GAAGQ,EAAIK,QAAQc,GAAG,cAAe3B,EAAEsC,MAAM9B,EAAIgC,YAAahC,IAC1DA,EAAI+B,mBAENE,YAAa,SAASnC,EAAQC,GACxBD,EAAOK,MAAM+B,OACfjC,KAAKgB,WAAW,GAAGiB,KAAOpC,EAAOK,MAAM+B,OAG3CC,UAAW,WACT,GAAInC,GAAMC,IACVT,IAAGQ,EAAIM,gBAAgB8B,IAAI,cAAepC,EAAI+B,iBAC9CvC,GAAGQ,EAAIK,QAAQ+B,IAAI,cAAepC,EAAIgC,cAExCK,UAAU,EACVC,KAAM,OAGNP,gBAAiB,WACf,GAAI/B,GAAMC,IACV,KAAKD,EAAI2B,QAAS,CAGhB,GAAIY,GAAYvC,EAAIM,cAAckB,IAAI,SAASgB,GAC7C,MAAOA,GAAIxC,EAAIE,YAEjBF,GAAIiB,WAAWuB,IAAID,KAGvBP,YAAa,WAGX,IAFA,GAAIhC,GAAMC,KACRwC,EAAIzC,EAAIM,cAAcoC,OACjBD,KAAM,GACPjD,EAAEmD,QAAQ3C,EAAIM,cAAcmC,GAAIzC,EAAIK,OAAS,GAE/Cb,EAAEoC,WAAW5B,EAAIM,eAAesC,OAAOH,EAG3CxC,MAAK8B,mBAEPc,eAAe,MAIhB5C,KAAK6C","file":"multiselect.min.js","sourcesContent":["/*! Sample JsViews tag control: {{multiselect}} control v0.9.84 (Beta)\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n * Copyright 2017, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\n    multisel: {\n    boundProps: [\"size\"],\n    init: function(tagCtx, linkCtx) {\n      var tag = this;\n      tag.valueProp = tag.tagCtx.props.valueProp || \"id\",\n      tag.labelProp = tag.tagCtx.props.labelProp || \"name\";\n      tag.items = tagCtx.props.items;\n      tag.selectedItems = tagCtx.props.selected || [];\n      tag._optionsTmpl = \"{^{for ~tag.items}}<option data-link='value{:\" + tag.valueProp + \"}'>{{:\" + tag.labelProp + \"}}</option>{{/for}}\";\n      if (tag.inline) {\n        if (tagCtx.content) {\n          $.views.sub.error(\"{{multiselect}} must be empty\");\n        } else {\n          tag.template = \"<select multiple='multiple'>\" + tag._optionsTmpl + \"</select>\";\n        }\n      } else {\n        linkCtx.elem.multiple = \"multiple\";\n        tag.template = tag._optionsTmpl;\n      }\n    },\n    onBind: function(tagCtx, linkCtx) {\n      var tag = this;\n      tag.selectElem = tag.inline ? tag.contents(\"select\") : $(linkCtx.elem);\n      tag.selectElem.on(\"change\", function(ev, evargs) {\n          var newSelection = tag.selectElem.children().map(function(i) {\n            return this.selected && tag.items[i] || null;\n          }).get();\n\n        tag._selSet = true;\n        $.observable(tag.selectedItems).refresh(newSelection);\n        tag._selSet = false;\n      });\n      $([tag.selectedItems]).on(\"arrayChange\", $.proxy(tag.updateSelection, tag));\n      $([tag.items]).on(\"arrayChange\", $.proxy(tag.updateItems, tag));\n      tag.updateSelection();\n    },\n    onAfterLink: function(tagCtx, linkCtx) {\n      if (tagCtx.props.size) {\n        this.selectElem[0].size = tagCtx.props.size;\n      }\n    },\n    onDispose: function() {\n      var tag = this;\n      $([tag.selectedItems]).off(\"arrayChange\", tag.updateSelection);\n      $([tag.items]).off(\"arrayChange\", tag.updateItems);\n    },\n    onUpdate: false, // don't rerender\n    attr: \"html\",\n\n    //METHODS\n    updateSelection: function() {\n      var tag = this;\n      if (!tag._selSet) {\n        // Map selectedItems to the corresponding array of strings\n        // (the names, or other prop specified by valueProp)\n        var selection = tag.selectedItems.map(function(val) {\n          return val[tag.valueProp];\n        });\n        tag.selectElem.val(selection); // Set selection on the <select> element\n      }\n    },\n    updateItems: function() {\n      var tag = this,\n        l = tag.selectedItems.length;\n      while (l-- > 0) {\n        if ($.inArray(tag.selectedItems[l], tag.items) < 0) {\n          // This selectedItem is no longer in the items\n          $.observable(tag.selectedItems).remove(l);\n        }\n      }\n      this.updateSelection();\n    },\n    dataBoundOnly: true\n  }\n});\n\n})(this.jQuery);\n"]}