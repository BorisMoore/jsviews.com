{"version":3,"sources":["multiselect.js"],"names":["$","views","tags","multisel","boundProps","init","tagCtx","linkCtx","tag","this","valueProp","props","labelProp","items","selectedItems","selected","_optionsTmpl","_","inline","content","sub","error","template","elem","multiple","onBind","selectElem","contents","on","ev","evargs","newSelection","children","map","i","get","_selSet","observable","refresh","proxy","updateSelection","updateItems","onAfterLink","size","onDispose","off","onUpdate","eventArgs","tagCtxs","attr","selection","val","l","length","inArray","remove","dataBoundOnly","jQuery"],"mappings":";;CAOA,SAAUA,GACV,YAEAA,GAAEC,MAAMC,MACJC,UACAC,YAAa,QACbC,KAAM,SAASC,EAAQC,GACrB,GAAIC,GAAMC,IACVD,GAAIE,UAAYF,EAAIF,OAAOK,MAAMD,WAAa,KAC9CF,EAAII,UAAYJ,EAAIF,OAAOK,MAAMC,WAAa,OAC9CJ,EAAIK,MAAQP,EAAOK,MAAME,MACzBL,EAAIM,cAAgBR,EAAOK,MAAMI,aACjCP,EAAIQ,aAAe,gDAAkDR,EAAIE,UAAY,SAAWF,EAAII,UAAY,sBAC5GJ,EAAIS,EAAEC,OACJZ,EAAOa,QACTnB,EAAEC,MAAMmB,IAAIC,MAAM,iCAElBb,EAAIc,SAAW,+BAAiCd,EAAIQ,aAAe,aAGrET,EAAQgB,KAAKC,SAAW,WACxBhB,EAAIc,SAAWd,EAAIQ,eAGvBS,OAAQ,SAASnB,EAAQC,GACvB,GAAIC,GAAMC,IACVD,GAAIkB,WAAalB,EAAIS,EAAEC,OAASV,EAAImB,SAAS,UAAY3B,EAAEO,EAAQgB,MACnEf,EAAIkB,WAAWE,GAAG,SAAU,SAASC,EAAIC,GACrC,GAAIC,GAAevB,EAAIkB,WAAWM,WAAWC,IAAI,SAASC,GACxD,MAAOzB,MAAKM,UAAYP,EAAIK,MAAMqB,IAAM,OACvCC,KAEL3B,GAAI4B,SAAU,EACdpC,EAAEqC,WAAW7B,EAAIM,eAAewB,QAAQP,GACxCvB,EAAI4B,SAAU,IAEhBpC,GAAGQ,EAAIM,gBAAgBc,GAAG,cAAe5B,EAAEuC,MAAM/B,EAAIgC,gBAAiBhC,IACtER,GAAGQ,EAAIK,QAAQe,GAAG,cAAe5B,EAAEuC,MAAM/B,EAAIiC,YAAajC,IAC1DA,EAAIgC,mBAENE,YAAa,SAASpC,EAAQC,GACxBD,EAAOK,MAAMgC,OACflC,KAAKiB,WAAW,GAAGiB,KAAOrC,EAAOK,MAAMgC,OAG3CC,UAAW,WACT,GAAIpC,GAAMC,IACVT,IAAGQ,EAAIM,gBAAgB+B,IAAI,cAAerC,EAAIgC,iBAC9CxC,GAAGQ,EAAIK,QAAQgC,IAAI,cAAerC,EAAIiC,cAExCK,SAAU,SAASjB,EAAIkB,EAAWC,GAChC,OAAO,GAETC,KAAM,OAGNT,gBAAiB,WACf,GAAIhC,GAAMC,IACV,KAAKD,EAAI4B,QAAS,CAGhB,GAAIc,GAAY1C,EAAIM,cAAcmB,IAAI,SAASkB,GAC7C,MAAOA,GAAI3C,EAAIE,YAEjBF,GAAIkB,WAAWyB,IAAID,KAGvBT,YAAa,WAGX,IAFA,GAAIjC,GAAMC,KACR2C,EAAI5C,EAAIM,cAAcuC,OACjBD,KAAM,GACPpD,EAAEsD,QAAQ9C,EAAIM,cAAcsC,GAAI5C,EAAIK,OAAS,GAE/Cb,EAAEqC,WAAW7B,EAAIM,eAAeyC,OAAOH,EAG3C3C,MAAK+B,mBAEPgB,eAAe,MAIhB/C,KAAKgD","file":"multiselect.min.js","sourcesContent":["/*! Sample JsViews tag control: {{multiselect}} control v0.9.83 (Beta)\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n * Copyright 2016, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\n    multisel: {\n    boundProps: [\"size\"],\n    init: function(tagCtx, linkCtx) {\n      var tag = this;\n      tag.valueProp = tag.tagCtx.props.valueProp || \"id\",\n      tag.labelProp = tag.tagCtx.props.labelProp || \"name\";\n      tag.items = tagCtx.props.items;\n      tag.selectedItems = tagCtx.props.selected || [];\n      tag._optionsTmpl = \"{^{for ~tag.items}}<option data-link='value{:\" + tag.valueProp + \"}'>{{:\" + tag.labelProp + \"}}</option>{{/for}}\";\n      if (tag._.inline) {\n        if (tagCtx.content) {\n          $.views.sub.error(\"{{multiselect}} must be empty\");\n        } else {\n          tag.template = \"<select multiple='multiple'>\" + tag._optionsTmpl + \"</select>\";\n        }\n      } else {\n        linkCtx.elem.multiple = \"multiple\";\n        tag.template = tag._optionsTmpl;\n      }\n    },\n    onBind: function(tagCtx, linkCtx) {\n      var tag = this;\n      tag.selectElem = tag._.inline ? tag.contents(\"select\") : $(linkCtx.elem);\n      tag.selectElem.on(\"change\", function(ev, evargs) {\n          var newSelection = tag.selectElem.children().map(function(i) {\n            return this.selected && tag.items[i] || null;\n          }).get();\n\n        tag._selSet = true;\n        $.observable(tag.selectedItems).refresh(newSelection);\n        tag._selSet = false;\n      });\n      $([tag.selectedItems]).on(\"arrayChange\", $.proxy(tag.updateSelection, tag));\n      $([tag.items]).on(\"arrayChange\", $.proxy(tag.updateItems, tag));\n      tag.updateSelection();\n    },\n    onAfterLink: function(tagCtx, linkCtx) {\n      if (tagCtx.props.size) {\n        this.selectElem[0].size = tagCtx.props.size;\n      }\n    },\n    onDispose: function() {\n      var tag = this;\n      $([tag.selectedItems]).off(\"arrayChange\", tag.updateSelection);\n      $([tag.items]).off(\"arrayChange\", tag.updateItems);\n    },\n    onUpdate: function(ev, eventArgs, tagCtxs) {\n      return false; // don't rerender\n    },\n    attr: \"html\",\n\n    //METHODS\n    updateSelection: function() {\n      var tag = this;\n      if (!tag._selSet) {\n        // Map selectedItems to the corresponding array of strings\n        // (the names, or other prop specified by valueProp)\n        var selection = tag.selectedItems.map(function(val) {\n          return val[tag.valueProp];\n        });\n        tag.selectElem.val(selection); // Set selection on the <select> element\n      }\n    },\n    updateItems: function() {\n      var tag = this,\n        l = tag.selectedItems.length;\n      while (l-- > 0) {\n        if ($.inArray(tag.selectedItems[l], tag.items) < 0) {\n          // This selectedItem is no longer in the items\n          $.observable(tag.selectedItems).remove(l);\n        }\n      }\n      this.updateSelection();\n    },\n    dataBoundOnly: true\n  }\n});\n\n})(this.jQuery);\n"]}