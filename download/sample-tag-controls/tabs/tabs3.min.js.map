{"version":3,"sources":["tabs3.js"],"names":["$","views","tags","tabs","dataBoundOnly","setSize","mainElement","displayElement","bindTo","width","height","template","init","tagCtx","newPane","this","getPane","tagCtxs","undefined","pane","onUpdate","ev","event","newTagCtxs","props","isNaN","length","setTab","index","observable","setProperty","updateValue","jQuery"],"mappings":";;;;CASA,SAAUA,GACV,YAEAA,GAAEC,MAAMC,MACRC,MAEEC,eAAe,EACfC,SAAS,EACTC,YAAa,kBACbC,eAAgB,YAChBC,OAAQ,OACRC,MAAO,IACPC,OAAQ,GACRC,SACE,uXAgBFC,KAAM,SAASC,GACb,GAAIC,GAAUC,KAAKC,QAAQD,KAAKE,QAChBC,UAAZJ,IACFC,KAAKI,KAAOL,IAGhBM,SAAU,SAASC,EAAIC,EAAOC,GAC5B,GAAIT,GAAUC,KAAKC,QAAQO,EAC3B,OAAgBL,UAAZJ,QAGJC,KAAKI,KAAOL,IAIdK,KAAM,EAGNH,QAAS,SAASC,GAEhB,GAAIE,IAAQF,EAAQ,GAAGO,MAAML,IAC7B,KAAKM,MAAMN,IAASA,GAAQ,GAAKA,EAAOF,EAAQS,OAC9C,MAAOP,IAIXQ,OAAQ,SAASC,GAEf5B,EAAE6B,WAAWd,MAAMe,YAAY,OAAQF,GACvCb,KAAKgB,YAAY,GAAKH,QAKvBb,KAAKiB","file":"tabs3.min.js","sourcesContent":["/*! Sample JsViews tag control: {{tabs}} control with one-way binding from pane v1.0.0\nVersion using getPane()\nsee: http://www.jsviews.com/#download/sample-tagcontrols\nand http://www.jsviews.com/#bindingpatterns@tabs2way */\n/*\n * Copyright 2018, Boris Moore\n * Released under the MIT License.\n */\n\n(function($) {\n\"use strict\";\n\n$.views.tags({\ntabs: {\n  // JsViews tag settings\n  dataBoundOnly: true,\n  setSize: true,\n  mainElement: \".tabscontent td\",\n  displayElement: \".tabsview\",\n  bindTo: \"pane\",\n  width: 250,\n  height: 50,\n  template:\n    '{{if ~tagCtx.index===0}}' + // Render once only\n      '<table class=\"tabsview\"><tbody>' +\n        // Tab strip UI with 'click' handler calling tag.setTab() method\n        '<tr class=\"tabstrip\">' +\n          '{{for ~tag.tagCtxs}}' +\n            '<th data-link=\"class{:\\'header_\\' + (#index === ~tag.pane)} {on ~tag.setTab #index} {:props.caption}\"></th>' +\n          '{{/for}}' +\n        '</tr>' +\n        // Tab content with wrapped content of selected {{else}} block\n        '<tr class=\"tabscontent\">' +\n          '<td colspan=\"{{:~tag.tagCtxs.length}}\" data-link=\"{include ^tmpl=~tag.tagCtxs[~tag.pane].content}\"></td>' +\n        '</tr>' +\n      '</tbody></table>' +\n    '{{/if}}',\n\n  // JsViews handlers and methods\n  init: function(tagCtx) {\n    var newPane = this.getPane(this.tagCtxs);  // Validate 'pane' prop\n    if (newPane !== undefined) {\n      this.pane = newPane; // Is valid, so set to the value\n    }\n  },\n  onUpdate: function(ev, event, newTagCtxs) {\n    var newPane = this.getPane(newTagCtxs); // Validate 'pane' prop\n    if (newPane === undefined) {\n      return false; // Not a valid value, so no update\n    }\n    this.pane = newPane; // Valid value, so update\n  },\n\n  // tag properties/state\n  pane: 0, // Selected pane (defaults to 0)\n\n  // tag methods\n  getPane: function(tagCtxs) {\n    // Helper function\n    var pane = +tagCtxs[0].props.pane;\n    if (!isNaN(pane) && pane >= 0 && pane < tagCtxs.length) {\n      return pane;\n    }\n  },\n\n  setTab: function(index) {\n    // OnClick for a tab\n    $.observable(this).setProperty(\"pane\", index); // Update tag.pane\n    this.updateValue(\"\" + index); // Update external data, through two-way binding\n  }\n}\n});\n\n})(this.jQuery);\n\n"]}