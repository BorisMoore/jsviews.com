{"version":3,"sources":["jsonview.js"],"names":["$","views","tags","template","markup","converters","str","val","encode","replace","cvt","isFunction","this","ctx","noFunctions","notEmpty","key","expando","hasOwnProperty","init","depends","tagCtx","props","isFn","isArray","isObject","Date","jQuery"],"mappings":";;CAOA,SAAUA,GACR,YACAA,GAAEC,MAAMC,KAAK,YACXC,UACEC,OAAQ,2uBAwBRC,YACEC,IAAK,SAAsBC,GACzB,MAAOP,GAAEC,MAAMI,WAAWG,OAAOD,EAAI,IAAIE,QAAQ,KAAM,QAEzDC,IAAK,SAAsBH,GACzB,MAAIP,GAAEW,WAAWJ,GACPK,KAAKC,IAAIC,YACb,yBACAd,EAAEC,MAAMI,WAAWG,OAAOD,EAAI,IAE3BA,EAAM,MAKrBQ,SAAU,SAAkBR,GAC1B,IAAK,GAAIS,KAAOT,GACd,GAAIS,IAAQhB,EAAEiB,SAAWV,EAAIW,eAAeF,MAAUJ,KAAKC,IAAIC,cAAgBd,EAAEW,WAAWJ,EAAIS,KAC9F,OAAO,GAIbG,KAAM,WACJP,KAAKG,SAASK,QAAU,IACxBR,KAAKC,IAAIC,YAAcF,KAAKC,IAAIC,aAAeF,KAAKS,OAAOC,MAAMR,aAEnES,KAAMvB,EAAEW,WACRa,QAASxB,EAAEwB,QACXC,SAAU,SAAkBlB,GAC1B,MAAOA,IAAsB,gBAARA,MAAsBA,YAAemB,WAK7Dd,KAAKe","file":"jsonview.min.js","sourcesContent":["/*! Sample JsViews tag control: {{jsonview}} control v1.0.0\nsee: http://www.jsviews.com/#download/sample-tagcontrols */\n/*\n  * Copyright 2018, Boris Moore\n  * Released under the MIT License.\n*/\n\n(function($) {\n  \"use strict\";\n  $.views.tags(\"jsonview\", {\n    template: {\n      markup: '{{if ~tag.isArray(#data)}}'\n      + '<span class=\"jsonview\"><span class=\"brace\">[</span>{^{if length}}'\n        + '<ul class=\"jsonview\">'\n          + '{^{for}}'\n            + '<li {{:~tag.isFn(#data) ? \"class=\\'function\\'\" : \"\"}}>{^{jsonview/}}{^{if #index < #parent.data.length-1}},{{/if}}</li>'\n          + '{{/for}}'\n        + '</ul>'\n      + '{{/if}}<span class=\"brace\">]</span></span>'\n    + '{{else ~tag.isObject(#data)}}'\n      + '<span class=\"jsonview\"><span class=\"brace\">{</span>{^{if ~tag.notEmpty(#data)}}'\n        + '<ul class=\"jsonview\">'\n          + '{^{props noFunctions=~noFunctions}}'\n            + '<li {{:~tag.isFn(prop) ? \"class=\\'function\\'\" : \"\"}}>'\n              + '<label>\"{^{encode: key}}\": </label>'\n              + '{^{jsonview prop /}}{^{if #index < #parent.data.length-1}},{{/if}}'\n            + '</li>'\n          + '{{/props}}'\n        + '</ul>'\n      + '{{/if}}<span class=\"brace\">}</span></span>'\n    + '{{else #data+\"\"===#data}}'\n      + '\"{^{str:#data}}\"'\n    + '{{else}}'\n      + '{^{cvt:#data}}'\n    + '{{/if}}',\n      converters: {\n        str: function convertValue(val) {\n          return $.views.converters.encode(val+\"\").replace(/\"/g, '\\\\\"');\n        },\n        cvt: function convertValue(val) {\n          if ($.isFunction(val)) {\n            return (this.ctx.noFunctions\n              ? \"<em>[function...]</em>\"\n              : $.views.converters.encode(val+\"\"));\n          } else {\n            return val + \"\"; // TODO Add support for dates\n          }\n        }\n      }\n    },\n    notEmpty: function notEmpty(val) {\n      for (var key in val) {\n        if (key !== $.expando && val.hasOwnProperty(key) && (!this.ctx.noFunctions || !$.isFunction(val[key]))) {\n          return true;\n        }\n      }\n    },\n    init: function() {\n      this.notEmpty.depends = \"*\";\n      this.ctx.noFunctions = this.ctx.noFunctions || this.tagCtx.props.noFunctions;\n    },\n    isFn: $.isFunction,\n    isArray: $.isArray,\n    isObject: function isObject(val) {\n      return val && typeof val === \"object\" && !(val instanceof Date);\n    },\n\n  });\n\n})(this.jQuery);\n"]}