!function(e,t,i){"use strict";var a=t.templates('{^{if !hidden || ~tree.editable}}<li data-link="class{:~tree.selected === #data ? \'selected\' : \'unselected\'}">{^{if categories && categories.length }}<span class="toggle">{^{:expanded ? \'-\' : \'+\' }}</span>{{else}}<span class="spacer">&bull;</span>{{/if}}{^{if ~tree.editedNode(#data)}}<button class="up cmdbtn">up</button><button class="down cmdbtn">down</button><button class="add cmdbtn">add</button>{{if ~parentTags.treeNode }}<span class="remove"></span>{{/if}}<button class="hide cmdbtn" data-link="hidden ? \'show\' : \'hide\'"></button><label>label: <input data-link="label" /></label><label>name: <input data-link="name" /></label><div class="bottom"></div>{{else}}<span>{{>label}}</span>{{/if}}</li>{^{if expanded }}<li><ul>{^{for categories }}{^{treeNode/}}{{/for}}</ul></li>{{/if}}{{/if}}'),s=t.templates('<ul class="tree">{^{for}}{^{treeNode/}}{{/for}}</ul>'),n=t.templates('<table class="tabsview"><tbody><tr class="tabstrip">{{for ~tag.tagCtxs }}<th data-link="class{:\'header_\' + (#index === ~tag.selectedIndex)}">{{>props.tabCaption}}</th>{{/for}}</tr><tr class="tabscontent"><td colspan="{{:~tag.tagCtxs.length}}">{^{for ^tmpl=~tag.tagCtxs[~tag.selectedIndex].content /}}</td></tr></tbody></table>'),o={init:function(e){this.selectedIndex=e.props.selectedTab||0,this.tabCount=this.tagCtxs.length,(this.parents.section||this.parents.page).tabs=this},render:function(){var e=this.tagCtx;return this.selectedIndex===e.index?e.render():""},activateTabs:function(){var e=this;e.contents(!0,".tabstrip").first().on("click",".header_false",function(){e.setTab(t.view(this).index)})},template:n,setTab:function(e){t.observable(this).setProperty("selectedIndex",e),this.onSelectionChange&&this.onSelectionChange(e,this)}},l={init:function(){this.parent.setTree(this),this.ctx.tree=this},onAfterLink:function(){var e=this;e.contents("ul").on("click",".selected, .unselected",function(){t.view(this).ctx.tag.select()}).on("click",".toggle",function(e){t.view(this).ctx.tag.toggle(),e.stopImmediatePropagation()}).on("click",".remove",function(e){t.view(this).ctx.tag.remove(),e.stopImmediatePropagation()}).on("click",".add",function(e){t.view(this).ctx.tag.addCategory(),e.stopImmediatePropagation()}).on("click",".up",function(e){t.view(this).ctx.tag.moveCategoryUp(),e.stopImmediatePropagation()}).on("click",".down",function(e){t.view(this).ctx.tag.moveCategoryDown(),e.stopImmediatePropagation()}).on("click",".hide",function(e){t.view(this).ctx.tag.hideCategory(),e.stopImmediatePropagation()})},template:s,_newNodeCounter:0,select:function(e){t.observable(this).setProperty("selected",e.data),this.onSelectionChange&&this.onSelectionChange(e.data)},editedNode:function(e){return this.editable&&this.selected===e}},d={init:function(e){this.data=e.view.data,this.tree=this.ctxPrm("tree")},template:a,toggle:function(){t.observable(this.data).setProperty("expanded",!this.data.expanded),this.tree.onExpansionChange&&this.tree.onExpansionChange(this.data)},remove:function(){var e,i=this.parent,a=i.data.categories,s=this.tagCtx.view.index;t.observable(a).remove(s),e=i.childTags(),this.tree.select(e[s]||e[s-1]||i)},select:function(){this.tree.selected!==this.data&&this.tree.select(this)},addCategory:function(){var e,i=this.data;i.categories=i.categories||[],t.observable(this.data.categories).insert({name:"name"+this.tree._newNodeCounter++,label:""}),t.observable(i).setProperty("expanded",!0),e=this.childTags(),this.tree.select(e[e.length-1])},moveCategoryUp:function(){var e=this.tagCtx.view.index,i=this.parent.data.categories;e&&t.observable(i).move(e,e-1)},moveCategoryDown:function(){var e=this.tagCtx.view.index,i=this.parent.data.categories;e+1<i.length&&t.observable(i).move(e,e+1)},hideCategory:function(){var e=this.parent.data.categories[this.tagCtx.view.index];t.observable(e).setProperty("hidden",!e.hidden)}},c={baseTag:"for",onArrayChange:function(e,t){this.baseApply(arguments),"insert"===t.change&&this.toggleSelect(t.index)},flow:!1,toggleSelect:function(e){this.item(e).toggleSelect()},item:function(e){return this.childTags()[e]},onToggleSelect:function(e){e===this.selectedChild?this.selectedChild=null:e.selected&&(this.selectedChild&&this.selectedChild.toggleSelect(),this.selectedChild=e)}};l.editedNode.depends="editable",t.views.tags({tabs:o,tree:l,treeNode:d,selectList:c})}(this,this.jQuery);
//# sourceMappingURL=built-in-tags.min.js.map
